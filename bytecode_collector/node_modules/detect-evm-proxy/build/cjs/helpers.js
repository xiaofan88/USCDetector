"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse1167Bytecode = exports.readAddress = void 0;
const address_1 = require("@ethersproject/address");
const constants_1 = require("./constants");
const readAddress = (value) => {
    if (typeof value !== "string" || value === "0x") {
        throw new Error(`Invalid address value: ${value}`);
    }
    let address = value;
    if (address.length === 66) {
        address = "0x" + address.slice(-40);
    }
    const zeroAddress = "0x" + "0".repeat(40);
    if (address === zeroAddress) {
        throw new Error("Empty address");
    }
    return (0, address_1.getAddress)(address);
};
exports.readAddress = readAddress;
const parse1167Bytecode = (bytecode) => {
    if (typeof bytecode !== "string" ||
        !bytecode.startsWith(constants_1.EIP_1167_BYTECODE_PREFIX) ||
        !bytecode.endsWith(constants_1.EIP_1167_BYTECODE_SUFFIX)) {
        throw new Error("Not an EIP-1167 bytecode");
    }
    // detect length of address (20 bytes non-optimized, 0 < N < 20 bytes for vanity addresses)
    const pushNHex = bytecode.substring(constants_1.EIP_1167_BYTECODE_PREFIX.length, constants_1.EIP_1167_BYTECODE_PREFIX.length + 2);
    // push1 ... push20 use opcodes 0x60 ... 0x73
    const addressLength = parseInt(pushNHex, 16) - 0x5f;
    if (addressLength < 1 || addressLength > 20) {
        throw new Error("Not an EIP-1167 bytecode");
    }
    const addressFromBytecode = bytecode.substring(constants_1.EIP_1167_BYTECODE_PREFIX.length + 2, constants_1.EIP_1167_BYTECODE_PREFIX.length + 2 + addressLength * 2 // address length is in bytes, 2 hex chars make up 1 byte
    );
    // padStart is needed for vanity addresses
    return `0x${addressFromBytecode.padStart(40, "0")}`;
};
exports.parse1167Bytecode = parse1167Bytecode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9EQUFvRDtBQUVwRCwyQ0FHcUI7QUFFZCxNQUFNLFdBQVcsR0FBRyxDQUFDLEtBQWMsRUFBVSxFQUFFO0lBQ3BELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7UUFDL0MsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNwRDtJQUVELElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztJQUNwQixJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFO1FBQ3pCLE9BQU8sR0FBRyxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3JDO0lBRUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUMsSUFBSSxPQUFPLEtBQUssV0FBVyxFQUFFO1FBQzNCLE1BQU0sSUFBSSxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDbEM7SUFFRCxPQUFPLElBQUEsb0JBQVUsRUFBQyxPQUFPLENBQUMsQ0FBQztBQUM3QixDQUFDLENBQUM7QUFoQlcsUUFBQSxXQUFXLGVBZ0J0QjtBQUVLLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxRQUFpQixFQUFVLEVBQUU7SUFDN0QsSUFDRSxPQUFPLFFBQVEsS0FBSyxRQUFRO1FBQzVCLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxvQ0FBd0IsQ0FBQztRQUM5QyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsb0NBQXdCLENBQUMsRUFDNUM7UUFDQSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7S0FDN0M7SUFFRCwyRkFBMkY7SUFDM0YsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FDakMsb0NBQXdCLENBQUMsTUFBTSxFQUMvQixvQ0FBd0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUNwQyxDQUFDO0lBQ0YsNkNBQTZDO0lBQzdDLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBRXBELElBQUksYUFBYSxHQUFHLENBQUMsSUFBSSxhQUFhLEdBQUcsRUFBRSxFQUFFO1FBQzNDLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztLQUM3QztJQUVELE1BQU0sbUJBQW1CLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FDNUMsb0NBQXdCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDbkMsb0NBQXdCLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxhQUFhLEdBQUcsQ0FBQyxDQUFDLHlEQUF5RDtLQUNsSCxDQUFDO0lBRUYsMENBQTBDO0lBQzFDLE9BQU8sS0FBSyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUM7QUFDdEQsQ0FBQyxDQUFDO0FBNUJXLFFBQUEsaUJBQWlCLHFCQTRCNUIifQ==