"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// obtained as bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)
const EIP_1967_LOGIC_SLOT = '0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc';
// obtained as bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)
const EIP_1967_BEACON_SLOT = '0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50';
// obtained as keccak256("org.zeppelinos.proxy.implementation")
const OPEN_ZEPPELIN_IMPLEMENTATION_SLOT = '0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3';
// obtained as keccak256("PROXIABLE")
const EIP_1822_LOGIC_SLOT = '0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7';
const EIP_1167_BEACON_METHODS = [
    // bytes4(keccak256("implementation()")) padded to 32 bytes
    '0x5c60da1b00000000000000000000000000000000000000000000000000000000',
    // bytes4(keccak256("childImplementation()")) padded to 32 bytes
    // some implementations use this over the standard method name so that the beacon contract is not detected as an EIP-897 proxy itself
    '0xda52571600000000000000000000000000000000000000000000000000000000',
];
const EIP_897_INTERFACE = [
    // bytes4(keccak256("implementation()")) padded to 32 bytes
    '0x5c60da1b00000000000000000000000000000000000000000000000000000000',
];
const GNOSIS_SAFE_PROXY_INTERFACE = [
    // bytes4(keccak256("masterCopy()")) padded to 32 bytes
    '0xa619486e00000000000000000000000000000000000000000000000000000000',
];
const COMPTROLLER_PROXY_INTERFACE = [
    // bytes4(keccak256("comptrollerImplementation()")) padded to 32 bytes
    '0xbb82aa5e00000000000000000000000000000000000000000000000000000000',
];
const detectProxyTarget = (proxyAddress, jsonRpcRequest, blockTag = 'latest') => Promise.any([
    // EIP-1167 Minimal Proxy Contract
    jsonRpcRequest({
        method: 'eth_getCode',
        params: [proxyAddress, blockTag],
    })
        .then(parse1167Bytecode)
        .then(readAddress),
    // EIP-1967 direct proxy
    jsonRpcRequest({
        method: 'eth_getStorageAt',
        params: [proxyAddress, EIP_1967_LOGIC_SLOT, blockTag],
    }).then(readAddress),
    // EIP-1967 beacon proxy
    jsonRpcRequest({
        method: 'eth_getStorageAt',
        params: [proxyAddress, EIP_1967_BEACON_SLOT, blockTag],
    })
        .then(readAddress)
        .then((beaconAddress) => jsonRpcRequest({
        method: 'eth_call',
        params: [
            {
                to: beaconAddress,
                data: EIP_1167_BEACON_METHODS[0],
            },
            blockTag,
        ],
    }).catch(() => jsonRpcRequest({
        method: 'eth_call',
        params: [
            {
                to: beaconAddress,
                data: EIP_1167_BEACON_METHODS[1],
            },
            blockTag,
        ],
    })))
        .then(readAddress),
    // OpenZeppelin proxy pattern
    jsonRpcRequest({
        method: 'eth_getStorageAt',
        params: [proxyAddress, OPEN_ZEPPELIN_IMPLEMENTATION_SLOT, blockTag],
    }).then(readAddress),
    // EIP-1822 Universal Upgradeable Proxy Standard
    jsonRpcRequest({
        method: 'eth_getStorageAt',
        params: [proxyAddress, EIP_1822_LOGIC_SLOT, blockTag],
    }).then(readAddress),
    // EIP-897 DelegateProxy pattern
    jsonRpcRequest({
        method: 'eth_call',
        params: [
            {
                to: proxyAddress,
                data: EIP_897_INTERFACE[0],
            },
            blockTag,
        ],
    }).then(readAddress),
    // GnosisSafeProxy contract
    jsonRpcRequest({
        method: 'eth_call',
        params: [
            {
                to: proxyAddress,
                data: GNOSIS_SAFE_PROXY_INTERFACE[0],
            },
            blockTag,
        ],
    }).then(readAddress),
    // Comptroller proxy
    jsonRpcRequest({
        method: 'eth_call',
        params: [
            {
                to: proxyAddress,
                data: COMPTROLLER_PROXY_INTERFACE[0],
            },
            blockTag,
        ],
    }).then(readAddress),
]).catch(() => null);
const readAddress = (value) => {
    if (typeof value !== 'string' || value === '0x') {
        throw new Error(`Invalid address value: ${value}`);
    }
    let address = value;
    if (address.length === 66) {
        address = '0x' + address.slice(-40);
    }
    const zeroAddress = '0x' + '0'.repeat(40);
    if (address === zeroAddress) {
        throw new Error('Empty address');
    }
    return address;
};
const EIP_1167_BYTECODE_PREFIX = '0x363d3d373d3d3d363d';
const EIP_1167_BYTECODE_SUFFIX = '57fd5bf3';
const parse1167Bytecode = (bytecode) => {
    if (typeof bytecode !== 'string' ||
        !bytecode.startsWith(EIP_1167_BYTECODE_PREFIX) ||
        !bytecode.endsWith(EIP_1167_BYTECODE_SUFFIX)) {
        throw new Error('Not an EIP-1167 bytecode');
    }
    // detect length of address (20 bytes non-optimized, 0 < N < 20 bytes for vanity addresses)
    const pushNHex = bytecode.substring(EIP_1167_BYTECODE_PREFIX.length, EIP_1167_BYTECODE_PREFIX.length + 2);
    // push1 ... push20 use opcodes 0x60 ... 0x73
    const addressLength = parseInt(pushNHex, 16) - 0x5f;
    if (addressLength < 1 || addressLength > 20) {
        throw new Error('Not an EIP-1167 bytecode');
    }
    const addressFromBytecode = bytecode.substring(EIP_1167_BYTECODE_PREFIX.length + 2, EIP_1167_BYTECODE_PREFIX.length + 2 + addressLength * 2 // address length is in bytes, 2 hex chars make up 1 byte
    );
    // padStart is needed for vanity addresses
    return `0x${addressFromBytecode.padStart(40, '0')}`;
};
exports.default = detectProxyTarget;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSw4RUFBOEU7QUFDOUUsTUFBTSxtQkFBbUIsR0FDdkIsb0VBQW9FLENBQUE7QUFFdEUsc0VBQXNFO0FBQ3RFLE1BQU0sb0JBQW9CLEdBQ3hCLG9FQUFvRSxDQUFBO0FBRXRFLCtEQUErRDtBQUMvRCxNQUFNLGlDQUFpQyxHQUNyQyxvRUFBb0UsQ0FBQTtBQUV0RSxxQ0FBcUM7QUFDckMsTUFBTSxtQkFBbUIsR0FDdkIsb0VBQW9FLENBQUE7QUFFdEUsTUFBTSx1QkFBdUIsR0FBRztJQUM5QiwyREFBMkQ7SUFDM0Qsb0VBQW9FO0lBQ3BFLGdFQUFnRTtJQUNoRSxxSUFBcUk7SUFDckksb0VBQW9FO0NBQ3JFLENBQUE7QUFFRCxNQUFNLGlCQUFpQixHQUFHO0lBQ3hCLDJEQUEyRDtJQUMzRCxvRUFBb0U7Q0FDckUsQ0FBQTtBQUVELE1BQU0sMkJBQTJCLEdBQUc7SUFDbEMsdURBQXVEO0lBQ3ZELG9FQUFvRTtDQUNyRSxDQUFBO0FBRUQsTUFBTSwyQkFBMkIsR0FBRztJQUNsQyxzRUFBc0U7SUFDdEUsb0VBQW9FO0NBQ3JFLENBQUE7QUFFRCxNQUFNLGlCQUFpQixHQUFHLENBQ3hCLFlBQW9CLEVBQ3BCLGNBQTBDLEVBQzFDLFdBQXFCLFFBQVEsRUFDTCxFQUFFLENBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDVixrQ0FBa0M7SUFDbEMsY0FBYyxDQUFDO1FBQ2IsTUFBTSxFQUFFLGFBQWE7UUFDckIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQztLQUNqQyxDQUFDO1NBQ0MsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1NBQ3ZCLElBQUksQ0FBQyxXQUFXLENBQUM7SUFFcEIsd0JBQXdCO0lBQ3hCLGNBQWMsQ0FBQztRQUNiLE1BQU0sRUFBRSxrQkFBa0I7UUFDMUIsTUFBTSxFQUFFLENBQUMs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