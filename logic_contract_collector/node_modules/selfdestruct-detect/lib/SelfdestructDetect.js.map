{"version":3,"sources":["webpack://SelfdestructDetect/webpack/universalModuleDefinition","webpack://SelfdestructDetect/webpack/bootstrap","webpack://SelfdestructDetect/./src/index.ts","webpack://SelfdestructDetect/./node_modules/node-libs-browser/node_modules/buffer/index.js","webpack://SelfdestructDetect/(webpack)/buildin/global.js","webpack://SelfdestructDetect/./node_modules/base64-js/index.js","webpack://SelfdestructDetect/./node_modules/ieee754/index.js","webpack://SelfdestructDetect/./node_modules/node-libs-browser/node_modules/isarray/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","STOP","RETURN","REVERT","INVALID","SELFDESTRUCT","isHalting","opcode","includes","isPUSH","mightSelfdestruct","code","bytecode","Buffer","from","halted","index","length","default","global","base64","ieee754","isArray","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","Uint8Array","__proto__","arg","encodingOrOffset","this","Error","allocUnsafe","TypeError","ArrayBuffer","array","byteOffset","byteLength","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","slice","fromString","obj","isBuffer","len","checked","copy","buffer","val","type","data","fromObject","assertSize","size","toString","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","b","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","buf","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","push","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","start","end","fromByteArray","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","e","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","inspect","max","match","join","target","thisStart","thisEnd","thisCopy","targetCopy","isFinite","toJSON","Array","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","g","Function","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","output","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2"],"mappings":"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","file":"SelfdestructDetect.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SelfdestructDetect\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SelfdestructDetect\"] = factory();\n\telse\n\t\troot[\"SelfdestructDetect\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\r\nconst STOP = 0x00;\r\nconst JUMPDEST = 0x5b;\r\nconst PUSH1 = 0x60;\r\nconst PUSH32 = 0x7f;\r\nconst RETURN = 0xf3;\r\nconst REVERT = 0xfd;\r\nconst INVALID = 0xfe;\r\nconst SELFDESTRUCT = 0xff;\r\n\r\nconst isHalting = (opcode: number): boolean => [ STOP, RETURN, REVERT, INVALID, SELFDESTRUCT ].includes(opcode);\r\nconst isPUSH = (opcode: number): boolean => opcode >= PUSH1 && opcode <= PUSH32;\r\n\r\nexport const mightSelfdestruct = (code: string): boolean => {\r\n    const bytecode = Buffer.from(code, 'hex');\r\n    let halted = false;\r\n    for (let index = 0; index < bytecode.length; index++) {\r\n        const opcode = bytecode[index];\r\n        if(opcode === SELFDESTRUCT && !halted) {\r\n            return true;\r\n        } else if(opcode === JUMPDEST) {\r\n            halted = false;\r\n        } else if(isHalting(opcode)) {\r\n            halted = true;\r\n        } else if(isPUSH(opcode)) {\r\n            index += opcode - PUSH1 + 0x01;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport default mightSelfdestruct;","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n"],"sourceRoot":""}