import { EIP_897_INTERFACE, EIP_1167_BEACON_METHODS, EIP_1822_LOGIC_SLOT, EIP_1967_BEACON_SLOT, EIP_1967_LOGIC_SLOT, GNOSIS_SAFE_PROXY_INTERFACE, OPEN_ZEPPELIN_IMPLEMENTATION_SLOT, } from "./constants";
import { parse1167Bytecode, readAddress } from "./helpers";
import { PROXY_KIND, } from "./types";
async function detectProxyTarget(proxyAddress, jsonRpcRequest, blockTag = "latest") {
    try {
        return await Promise.any([
            // EIP-1167 Minimal Proxy Contract
            jsonRpcRequest({
                method: "eth_getCode",
                params: [proxyAddress, blockTag],
            })
                .then(parse1167Bytecode)
                .then((val) => {
                const contractAddress = readAddress(val);
                return {
                    contractAddress,
                    kind: PROXY_KIND.EIP_1167_MINIMAL_PROXY_CONTRACT,
                };
            }),
            // EIP-1967 direct proxy
            jsonRpcRequest({
                method: "eth_getStorageAt",
                params: [proxyAddress, EIP_1967_LOGIC_SLOT, blockTag],
            }).then((val) => {
                const contractAddress = readAddress(val);
                return {
                    contractAddress,
                    kind: PROXY_KIND.EIP_1967_TRANSPARENT_PROXY_PATTERN,
                };
            }),
            // EIP-1967 beacon proxy
            jsonRpcRequest({
                method: "eth_getStorageAt",
                params: [proxyAddress, EIP_1967_BEACON_SLOT, blockTag],
            })
                .then(readAddress)
                .then((beaconAddress) => jsonRpcRequest({
                method: "eth_call",
                params: [
                    {
                        to: beaconAddress,
                        data: EIP_1167_BEACON_METHODS[0],
                    },
                    blockTag,
                ],
            }).catch(() => jsonRpcRequest({
                method: "eth_call",
                params: [
                    {
                        to: beaconAddress,
                        data: EIP_1167_BEACON_METHODS[1],
                    },
                    blockTag,
                ],
            })))
                .then((val) => {
                const contractAddress = readAddress(val);
                return {
                    contractAddress,
                    kind: PROXY_KIND.EIP_1967_TRANSPARENT_PROXY_PATTERN,
                };
            }),
            // EIP-897 DelegateProxy pattern
            jsonRpcRequest({
                method: "eth_call",
                params: [
                    {
                        to: proxyAddress,
                        data: EIP_897_INTERFACE[0],
                    },
                    blockTag,
                ],
            }).then((val) => {
                const contractAddress = readAddress(val);
                return {
                    contractAddress,
                    kind: PROXY_KIND.EIP_897_DELEGATE_PROXY_PATTERN,
                };
            }),
            // EIP-1822 Universal Upgradeable Proxy Standard
            jsonRpcRequest({
                method: "eth_getStorageAt",
                params: [proxyAddress, EIP_1822_LOGIC_SLOT, blockTag],
            }).then((val) => {
                const contractAddress = readAddress(val);
                return {
                    contractAddress,
                    kind: PROXY_KIND.EIP_1822_UNIVERSAL_UPGRADEABLE_PROXY_STANDARD,
                };
            }),
            // OpenZeppelin proxy pattern
            jsonRpcRequest({
                method: "eth_getStorageAt",
                params: [proxyAddress, OPEN_ZEPPELIN_IMPLEMENTATION_SLOT, blockTag],
            }).then((val) => {
                const contractAddress = readAddress(val);
                return {
                    contractAddress,
                    kind: PROXY_KIND.OPEN_ZEPPELIN_PROXY_PATTERN,
                };
            }),
            // GnosisSafeProxy contract
            jsonRpcRequest({
                method: "eth_call",
                params: [
                    {
                        to: proxyAddress,
                        data: GNOSIS_SAFE_PROXY_INTERFACE[0],
                    },
                    blockTag,
                ],
            }).then((val) => {
                const contractAddress = readAddress(val);
                return {
                    contractAddress,
                    kind: PROXY_KIND.GNOSIS_SAFE_PROXY_CONTRACT,
                };
            }),
        ]);
    }
    catch {
        return null;
    }
}
export default detectProxyTarget;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGlCQUFpQixFQUNqQix1QkFBdUIsRUFDdkIsbUJBQW1CLEVBQ25CLG9CQUFvQixFQUNwQixtQkFBbUIsRUFDbkIsMkJBQTJCLEVBQzNCLGlDQUFpQyxHQUNsQyxNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzNELE9BQU8sRUFJTCxVQUFVLEdBQ1gsTUFBTSxTQUFTLENBQUM7QUFFakIsS0FBSyxVQUFVLGlCQUFpQixDQUM5QixZQUFvQixFQUNwQixjQUEwQyxFQUMxQyxXQUFxQixRQUFRO0lBRTdCLElBQUk7UUFDRixPQUFPLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUN2QixrQ0FBa0M7WUFDbEMsY0FBYyxDQUFDO2dCQUNiLE1BQU0sRUFBRSxhQUFhO2dCQUNyQixNQUFNLEVBQUUsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDO2FBQ2pDLENBQUM7aUJBQ0MsSUFBSSxDQUFDLGlCQUFpQixDQUFDO2lCQUN2QixJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDWixNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3pDLE9BQU87b0JBQ0wsZUFBZTtvQkFDZixJQUFJLEVBQUUsVUFBVSxDQUFDLCtCQUErQjtpQkFDakQsQ0FBQztZQUNKLENBQUMsQ0FBQztZQUVKLHdCQUF3QjtZQUN4QixjQUFjLENBQUM7Z0JBQ2IsTUFBTSxFQUFFLGtCQUFrQjtnQkFDMUIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLG1CQUFtQixFQUFFLFFBQVEsQ0FBQzthQUN0RCxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ2QsTUFBTSxlQUFlLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN6QyxPQUFPO29CQUNMLGVBQWU7b0JBQ2YsSUFBSSxFQUFFLFVBQVUsQ0FBQyxrQ0FBa0M7aUJBQ3BELENBQUM7WUFDSixDQUFDLENBQUM7WUFFRix3QkFBd0I7WUFDeEIsY0FBYyxDQUFDO2dCQUNiLE1BQU0sRUFBRSxrQkFBa0I7Z0JBQzFCLE1BQU0sRUFBRSxDQUFDLFlBQVksRUFBRSxvQkFBb0IsRUFBRSxRQUFRLENBQUM7YUFDdkQsQ0FBQztpQkFDQyxJQUFJLENBQUMsV0FBVyxDQUFDO2lCQUNqQixJQUFJLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUN0QixjQUFjLENBQUM7Z0JBQ2IsTUFBTSxFQUFFLFVBQVU7Z0JBQ2xCLE1BQU0sRUFBRTtvQkFDTjt3QkFDRSxFQUFFLEVBQUUsYUFBYTt3QkFDakIsSUFBSSxFQUFFLHVCQUF1QixDQUFDLENBQUMsQ0FBQztxQkFDakM7b0JBQ0QsUUFBUTtpQkFDVDthQUNGLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQ1osY0FBYyxDQUFDO2dCQUNiLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixNQUFNLEVBQUU7b0JBQ047d0JBQ0UsRUFBRSxFQUFFLGFBQWE7d0JBQ2pCLElBQUksRUFBRSx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7cUJBQ2pDO29CQUNELFFBQVE7aUJBQ1Q7YUFDRixDQUFDLENBQ0gsQ0FDRjtpQkFDQSxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDWixNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3pDLE9BQU87b0JBQ0wsZUFBZTtvQkFDZixJQUFJLEVBQUUsVUFBVSxDQUFDLGtDQUFrQztpQkFDcEQsQ0FBQztZQUNKLENBQUMsQ0FBQztZQUVKLGdDQUFnQztZQUNoQyxjQUFjLENBQUM7Z0JBQ2IsTUFBTSxFQUFFLFVBQVU7Z0JBQ2xCLE1BQU0sRUFBRTtvQkFDTjt3QkFDRSxFQUFFLEVBQUUsWUFBWTt3QkFDaEIsSUFBSSxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQztxQkFDM0I7b0JBQ0QsUUFBUTtpQkFDVDthQUNGLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDZCxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3pDLE9BQU87b0JBQ0wsZUFBZTtvQkFDZixJQUFJLEVBQUUsVUFBVSxDQUFDLDhCQUE4QjtpQkFDaEQsQ0FBQztZQUNKLENBQUMsQ0FBQztZQUVGLGdEQUFnRDtZQUNoRCxjQUFjLENBQUM7Z0JBQ2IsTUFBTSxFQUFFLGtCQUFrQjtnQkFDMUIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLG1CQUFtQixFQUFFLFFBQVEsQ0FBQzthQUN0RCxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ2QsTUFBTSxlQUFlLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN6QyxPQUFPO29CQUNMLGVBQWU7b0JBQ2YsSUFBSSxFQUFFLFVBQVUsQ0FBQyw2Q0FBNkM7aUJBQy9ELENBQUM7WUFDSixDQUFDLENBQUM7WUFFRiw2QkFBNkI7WUFDN0IsY0FBYyxDQUFDO2dCQUNiLE1BQU0sRUFBRSxrQkFBa0I7Z0JBQzFCLE1BQU0sRUFBRSxDQUFDLFlBQVksRUFBRSxpQ0FBaUMsRUFBRSxRQUFRLENBQUM7YUFDcEUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNkLE1BQU0sZUFBZSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDekMsT0FBTztvQkFDTCxlQUFlO29CQUNmLElBQUksRUFBRSxVQUFVLENBQUMsMkJBQTJCO2lCQUM3QyxDQUFDO1lBQ0osQ0FBQyxDQUFDO1lBRUYsMkJBQTJCO1lBQzNCLGNBQWMsQ0FBQztnQkFDYixNQUFNLEVBQUUsVUFBVTtnQkFDbEIsTUFBTSxFQUFFO29CQUNOO3dCQUNFLEVBQUUsRUFBRSxZQUFZO3dCQUNoQixJQUFJLEVBQUUsMkJBQTJCLENBQUMsQ0FBQyxDQUFDO3FCQUNyQztvQkFDRCxRQUFRO2lCQUNUO2FBQ0YsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNkLE1BQU0sZUFBZSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDekMsT0FBTztvQkFDTCxlQUFlO29CQUNmLElBQUksRUFBRSxVQUFVLENBQUMsMEJBQTBCO2lCQUM1QyxDQUFDO1lBQ0osQ0FBQyxDQUFDO1NBQ0gsQ0FBQyxDQUFDO0tBQ0o7SUFBQyxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUM7S0FDYjtBQUNILENBQUM7QUFFRCxlQUFlLGlCQUFpQixDQUFDIn0=