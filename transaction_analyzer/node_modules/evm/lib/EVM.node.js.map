{"version":3,"sources":["webpack://EVM/webpack/bootstrap","webpack://EVM/./src/utils/stringify.ts","webpack://EVM/./node_modules/big-integer/BigInteger.js","webpack://EVM/./src/opcodes/mload.ts","webpack://EVM/./src/opcodes/mod.ts","webpack://EVM/./src/opcodes/add.ts","webpack://EVM/./src/opcodes/mul.ts","webpack://EVM/./src/opcodes/sub.ts","webpack://EVM/./src/opcodes/shl.ts","webpack://EVM/./src/opcodes/sar.ts","webpack://EVM/./src/opcodes/lt.ts","webpack://EVM/./src/opcodes/gt.ts","webpack://EVM/./src/opcodes/jumpi.ts","webpack://EVM/./src/utils/stringifyInstructions.ts","webpack://EVM/./src/index.ts","webpack://EVM/./src/classes/tx.class.ts","webpack://EVM/(webpack)/buildin/module.js","webpack://EVM/./src/classes/evm.class.ts","webpack://EVM/./node_modules/ethereumjs-vm/dist/opcodes.js","webpack://EVM/./src/utils/opcodes.ts","webpack://EVM/./src/opcodes/stop.ts","webpack://EVM/./src/opcodes/div.ts","webpack://EVM/./src/opcodes/addmod.ts","webpack://EVM/./src/opcodes/mulmod.ts","webpack://EVM/./src/opcodes/exp.ts","webpack://EVM/./src/opcodes/signextend.ts","webpack://EVM/./src/opcodes/eq.ts","webpack://EVM/./src/opcodes/iszero.ts","webpack://EVM/./src/opcodes/and.ts","webpack://EVM/./src/opcodes/or.ts","webpack://EVM/./src/opcodes/xor.ts","webpack://EVM/./src/opcodes/not.ts","webpack://EVM/./src/opcodes/byte.ts","webpack://EVM/./src/opcodes/shr.ts","webpack://EVM/./src/opcodes/sha3.ts","webpack://EVM/./src/opcodes/address.ts","webpack://EVM/./src/opcodes/balance.ts","webpack://EVM/./src/opcodes/origin.ts","webpack://EVM/./src/opcodes/caller.ts","webpack://EVM/./src/opcodes/callvalue.ts","webpack://EVM/./src/opcodes/calldataload.ts","webpack://EVM/./src/opcodes/calldatasize.ts","webpack://EVM/./src/opcodes/calldatacopy.ts","webpack://EVM/./src/opcodes/codesize.ts","webpack://EVM/./src/opcodes/codecopy.ts","webpack://EVM/./src/opcodes/gasprice.ts","webpack://EVM/./src/opcodes/extcodesize.ts","webpack://EVM/./src/opcodes/extcodecopy.ts","webpack://EVM/./src/opcodes/returndatasize.ts","webpack://EVM/./src/opcodes/returndatacopy.ts","webpack://EVM/./src/opcodes/extcodehash.ts","webpack://EVM/./src/opcodes/blockhash.ts","webpack://EVM/./src/opcodes/coinbase.ts","webpack://EVM/./src/opcodes/timestamp.ts","webpack://EVM/./src/opcodes/number.ts","webpack://EVM/./src/opcodes/difficulty.ts","webpack://EVM/./src/opcodes/gaslimit.ts","webpack://EVM/./src/opcodes/pop.ts","webpack://EVM/./src/opcodes/mstore.ts","webpack://EVM/./src/opcodes/sload.ts","webpack://EVM/./src/opcodes/sstore.ts","webpack://EVM/./src/opcodes/jump.ts","webpack://EVM/./src/opcodes/pc.ts","webpack://EVM/./src/opcodes/msize.ts","webpack://EVM/./src/opcodes/gas.ts","webpack://EVM/./src/opcodes/jumpdest.ts","webpack://EVM/./src/opcodes/push.ts","webpack://EVM/./src/opcodes/dup.ts","webpack://EVM/./src/opcodes/swap.ts","webpack://EVM/./src/opcodes/log.ts","webpack://EVM/./src/opcodes/create.ts","webpack://EVM/./src/opcodes/call.ts","webpack://EVM/./src/opcodes/callcode.ts","webpack://EVM/./src/opcodes/return.ts","webpack://EVM/./src/utils/hex.ts","webpack://EVM/./src/opcodes/delegatecall.ts","webpack://EVM/./src/opcodes/create2.ts","webpack://EVM/./src/opcodes/staticcall.ts","webpack://EVM/./src/opcodes/revert.ts","webpack://EVM/./src/opcodes/invalid.ts","webpack://EVM/./src/opcodes/selfdestruct.ts","webpack://EVM/./src/utils/stringifyEvents.ts","webpack://EVM/./src/utils/stringifyStructs.ts","webpack://EVM/./src/utils/stringifyMappings.ts","webpack://EVM/./src/utils/stringifyVariables.ts","webpack://EVM/./src/utils/stringifyFunctions.ts","webpack://EVM/./src/classes/stack.class.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BigNumber","default","item","isInstance","toString","wrapped","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","bigInt","undefined","BASE","LOG_BASE","MAX_INT","MAX_INT_ARR","smallToArray","DEFAULT_ALPHABET","supportsNativeBigInt","BigInt","pow","Integer","v","radix","alphabet","caseSensitive","parseBase","parseValue","BigInteger","sign","this","isSmall","SmallInteger","NativeBigInt","isPrecise","Math","floor","arrayToSmall","arr","trim","length","compareAbs","createArray","x","Array","truncate","ceil","add","a","b","sum","l_a","l_b","carry","base","push","addAny","addSmall","subtract","difference","a_l","b_l","borrow","subtractAny","subtractSmall","multiplyLong","product","a_i","j","multiplySmall","shiftLeft","concat","multiplyKaratsuba","y","max","slice","ac","bd","abcd","useKaratsuba","l1","l2","multiplySmallAndArray","square","divMod1","quotientDigit","shift","q","result","divisorMostSignificantDigit","lambda","remainder","divisor","divModSmall","divMod2","guess","xlen","highx","highy","check","part","unshift","reverse","quotient","divModAny","self","Error","negate","abs","comparison","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","modPow","plus","minus","small","multiply","times","_multiplyBySmall","divmod","over","eval","isNegative","exp","isZero","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","isProbablePrime","iterations","randBetween","modInv","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","String","shiftRight","remQuo","and","or","xor","LOBMASK_I","LOBMASK_BI","roughLOB","integerLogarithm","tmp","e","min","gcd","lcm","low","range","random","digits","toBase","restricted","top","digit","fromArray","text","toLowerCase","absBase","alphabetValues","start","parseBaseFromArray","val","stringify","apply","map","valueOf","neg","Number","out","left","toBaseString","join","parseStringValue","split","decimalPlace","indexOf","test","parseNumberValue","toArray","str","toJSON","parseInt","minusOne","stringify_1","MLOAD","[object Object]","location","opcode","state","memoryLocation","stack","pop","memory","MOD","right","ADD","type","MUL","SUB","SHL","SAR","LT","equal","GT","functionHashes","updateCallDataLoad","types","argNumber","findReturns","returns","items","deepReturns","TopLevelFunction","hash","gasUsed","payable","visibility","constant","REQUIRE","condition","functionName","argumentTypes","replace","substr","forEach","every","returnItem","Variable","label","JUMPI","ifTrue","ifFalse","skipped","valid","true","false","jumpLocation","jumpCondition","opcodes","getOpcodes","jumpLocationData","find","pc","jumpIndex","jumps","instructions","halted","trueClone","clone","trueCloneTree","parse","falseClone","falseCloneTree","functions","functionClone","functionCloneTree","fullFunction","mappings","structlocation","structs","includes","variables","stringifyInstructions","instructionTree","indentation","instructionLines","instruction","falseInstructions","filter","debugLevel","repeat","elseOrElseIf","startsWith","_functions","_events","_functionHashes","_eventHashes","tx_class_1","Transaction","evm_class_1","EVM","events","eventHashes","parseSingle","data","Buffer","from","substring","transactionObject","blockHash","blockNumber","gas","gasPrice","input","to","functionHash","getFunctionHash","rawFunction","getFunction","match","descriptive","functionArguments","getRawArguments","rawFunctionArguments","functionArgumentType","functionArgument","webpackPolyfill","deprecate","paths","children","findOpcode","opcodes_1","stringifyEvents_1","stringifyStructs_1","stringifyMappings_1","stringifyVariables_1","stringifyFunctions_1","stringifyInstructions_1","stack_class_1","code","storage","layer","assign","index","currentOp","pushDataLength","pushData","Set","fee","reduce","getBytecode","reset","getEvents","keys","codes","0","1","2","3","4","5","6","7","8","9","10","11","16","17","18","19","20","21","22","23","24","25","26","27","28","29","32","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","80","81","82","83","84","85","86","87","88","89","90","91","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","240","241","242","243","244","245","250","253","254","255","op","full","freeLogs","in","dynamic","async","stop_1","add_1","mul_1","sub_1","div_1","mod_1","addmod_1","mulmod_1","exp_1","signextend_1","lt_1","gt_1","eq_1","iszero_1","and_1","or_1","xor_1","not_1","byte_1","shl_1","shr_1","sar_1","sha3_1","address_1","balance_1","origin_1","caller_1","callvalue_1","calldataload_1","calldatasize_1","calldatacopy_1","codesize_1","codecopy_1","gasprice_1","extcodesize_1","extcodecopy_1","returndatasize_1","returndatacopy_1","extcodehash_1","blockhash_1","coinbase_1","timestamp_1","number_1","difficulty_1","gaslimit_1","pop_1","mload_1","mstore_1","sload_1","sstore_1","jump_1","jumpi_1","pc_1","msize_1","gas_1","jumpdest_1","push_1","dup_1","swap_1","log_1","create_1","call_1","callcode_1","return_1","delegatecall_1","create2_1","staticcall_1","revert_1","invalid_1","selfdestruct_1","STOP","DIV","SDIV","SMOD","ADDMOD","MULMOD","EXP","SIGNEXTEND","SLT","SGT","EQ","ISZERO","AND","OR","XOR","NOT","BYTE","SHR","SHA3","ADDRESS","BALANCE","ORIGIN","CALLER","CALLVALUE","CALLDATALOAD","CALLDATASIZE","CALLDATACOPY","CODESIZE","CODECOPY","GASPRICE","EXTCODESIZE","EXTCODECOPY","RETURNDATASIZE","RETURNDATACOPY","EXTCODEHASH","BLOCKHASH","COINBASE","TIMESTAMP","NUMBER","DIFFICULTY","GASLIMIT","POP","MSTORE","MSTORE8","SLOAD","SSTORE","JUMP","PC","MSIZE","GAS","JUMPDEST","PUSH1","PUSH2","PUSH3","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH30","PUSH31","PUSH32","DUP1","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","SWAP1","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","LOG0","LOG1","LOG2","LOG3","LOG4","CREATE","CALL","CALLCODE","RETURN","DELEGATECALL","CREATE2","STATICCALL","REVERT","INVALID","SELFDESTRUCT","SIG","size","position","memoryStart","memoryLength","address","startLocation","copyLength","returnDataPosition","returnDataSize","memoryPosition","number","storeLocation","storeData","parseMapping","item2","MappingLoad","count","mappingName","mappingItems","mappingLocation","mappingItem","mappingParts","values","MappingStore","variableName","bad","duplicateLocation","duplicate","swapLocation","swap","LOG","topics","eventName","topicsCount","eventTopic","indexedCount","anonymous","outputStart","outputLength","hex_1","static","hex2a","hexx","hex","fromCharCode","isHex","h","pad32","pieces","stringLength","isNaN","stateEvents","stateEventValues","output","event","eventArguments","stateEvent","mapping","struct","stringifyMapping","mappingKey","mappingValue","deepMapping","mappingChild","mappingChild2","variable","functionInstance","fullFunctionName","fullFunctionArguments","Stack","elements","secondPosition","firstValue","secondValue"],"mappings":"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","file":"EVM.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","import * as BigNumber from '../../node_modules/big-integer';\r\n\r\nexport default (item: any) => {\r\n    if (BigNumber.isInstance(item)) {\r\n        return item.toString(16);\r\n    } else if (!item.wrapped) {\r\n        return item.toString();\r\n    } else {\r\n        return '(' + item.toString() + ')';\r\n    }\r\n};\r\n","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    var pow;\r\n    if (supportsNativeBigInt) {\r\n        // forced to use eval because ** is a syntax error on pre-ECMAScript2017 environments.\r\n        pow = eval(\"(a,b)=>a**b\");\r\n    }\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        if (b === BigInt(0)) return Integer[1];\r\n        if (a === BigInt(0)) return Integer[0];\r\n        if (a === BigInt(1)) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(BigInt(0));\r\n        return new NativeBigInt(pow(a, b));\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 325, 9375, 28178, 450775, 9780504, 1795265022]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2)));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(Math.random() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(Math.random() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define(\"big-integer\", [], function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class MLOAD {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly location: any;\r\n\r\n    constructor(location: any) {\r\n        this.name = 'MLOAD';\r\n        this.wrapped = true;\r\n        this.location = location;\r\n    }\r\n\r\n    toString() {\r\n        return 'memory[' + stringify(this.location) + ']';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const memoryLocation = state.stack.pop();\r\n    if (BigNumber.isInstance(memoryLocation) && memoryLocation.toJSNumber() in state.memory) {\r\n        state.stack.push(state.memory[memoryLocation.toJSNumber()]);\r\n    } else {\r\n        state.stack.push(new MLOAD(memoryLocation));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class MOD {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'MOD';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' % ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.mod(right));\r\n    } else {\r\n        state.stack.push(new MOD(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class ADD {\r\n    readonly name: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'ADD';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' + ' + stringify(this.right);\r\n    }\r\n\r\n    get type() {\r\n        if (this.left.type === this.right.type) {\r\n            return this.left.type;\r\n        } else if (!this.left.type && this.right.type) {\r\n            return this.right.type;\r\n        } else if (!this.right.type && this.left.type) {\r\n            return this.left.type;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.add(right));\r\n    } else if (BigNumber.isInstance(left) && left.isZero()) {\r\n        state.stack.push(right);\r\n    } else if (BigNumber.isInstance(right) && right.isZero()) {\r\n        state.stack.push(left);\r\n    } else {\r\n        state.stack.push(new ADD(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class MUL {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'MUL';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' * ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.multiply(right));\r\n    } else if (\r\n        (BigNumber.isInstance(left) && left.isZero()) ||\r\n        (BigNumber.isInstance(right) && right.isZero())\r\n    ) {\r\n        state.stack.push(BigNumber(0));\r\n    } else {\r\n        state.stack.push(new MUL(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class SUB {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'SUB';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' - ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.subtract(right));\r\n    } else {\r\n        state.stack.push(new SUB(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class SHL {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'SHL';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' << ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.shiftLeft(right));\r\n    } else {\r\n        state.stack.push(new SHL(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class SAR {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'SAR';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' >> ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.shiftRight(right));\r\n    } else {\r\n        state.stack.push(new SAR(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class LT {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n    readonly equal: boolean;\r\n\r\n    constructor(left: any, right: any, equal: boolean = false) {\r\n        this.name = 'LT';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.equal = equal;\r\n    }\r\n\r\n    toString() {\r\n        if (this.equal) {\r\n            return stringify(this.left) + ' <= ' + stringify(this.right);\r\n        } else {\r\n            return stringify(this.left) + ' < ' + stringify(this.right);\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(BigNumber(left.lesser(right) === true ? 1 : 0));\r\n    } else {\r\n        state.stack.push(new LT(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class GT {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n    readonly equal: boolean;\r\n\r\n    constructor(left: any, right: any, equal: boolean = false) {\r\n        this.name = 'GT';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.equal = equal;\r\n    }\r\n\r\n    toString() {\r\n        if (this.equal) {\r\n            return stringify(this.left) + ' >= ' + stringify(this.right);\r\n        } else {\r\n            return stringify(this.left) + ' > ' + stringify(this.right);\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(BigNumber(left.greater(right) === true ? 1 : 0));\r\n    } else {\r\n        state.stack.push(new GT(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport * as functionHashes from '../../data/functionHashes.json';\r\nimport stringify from '../utils/stringify';\r\n\r\nconst updateCallDataLoad = (item: any, types: any) => {\r\n    for (const i in item) {\r\n        if (item.hasOwnProperty(i)) {\r\n            if (\r\n                typeof item[i] === 'object' &&\r\n                item[i].name === 'CALLDATALOAD' &&\r\n                BigNumber.isInstance(item[i].location)\r\n            ) {\r\n                const argNumber = item[i].location\r\n                    .subtract(4)\r\n                    .divide(32)\r\n                    .toString();\r\n                item[i].type = types[argNumber];\r\n            }\r\n            if (typeof item[i] === 'object') {\r\n                updateCallDataLoad(item[i], types);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst findReturns = (item: any) => {\r\n    const returns = [];\r\n    for (const i in item) {\r\n        if (item.hasOwnProperty(i)) {\r\n            if (\r\n                typeof item[i] === 'object' &&\r\n                item[i].name === 'RETURN' &&\r\n                item[i].items &&\r\n                item[i].items.length > 0\r\n            ) {\r\n                returns.push(item[i].items);\r\n            }\r\n            if (typeof item[i] === 'object') {\r\n                const deepReturns: any = findReturns(item[i]);\r\n                if (deepReturns.length > 0) {\r\n                    returns.push(...deepReturns);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return returns;\r\n};\r\n\r\nexport class TopLevelFunction {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly hash: any;\r\n    readonly gasUsed: number;\r\n    readonly payable: boolean;\r\n    readonly visibility: string;\r\n    readonly constant: boolean;\r\n    readonly items: any;\r\n    readonly returns: any;\r\n\r\n    constructor(items: any, hash: any, gasUsed: number) {\r\n        this.name = 'Function';\r\n        this.hash = hash;\r\n        this.gasUsed = gasUsed;\r\n        this.items = items;\r\n        this.payable = true;\r\n        this.visibility = 'public';\r\n        this.constant = false;\r\n        this.returns = [];\r\n        if (\r\n            this.items.length > 0 &&\r\n            this.items[0] instanceof REQUIRE &&\r\n            this.items[0].condition.name === 'ISZERO' &&\r\n            this.items[0].condition.item.name === 'CALLVALUE'\r\n        ) {\r\n            this.payable = false;\r\n            this.items.shift();\r\n        }\r\n        if (this.items.length === 1 && this.items[0].name === 'RETURN') {\r\n            this.constant = true;\r\n        }\r\n        if (this.hash in functionHashes) {\r\n            const functionName = (functionHashes as any)[this.hash].split('(')[0];\r\n            const argumentTypes = (functionHashes as any)[this.hash]\r\n                .replace(functionName, '')\r\n                .substr(1)\r\n                .slice(0, -1)\r\n                .split(',');\r\n            if (\r\n                argumentTypes.length > 1 ||\r\n                (argumentTypes.length === 1 && argumentTypes[0] !== '')\r\n            ) {\r\n                this.items.forEach((item: any) => updateCallDataLoad(item, argumentTypes));\r\n            }\r\n        }\r\n        const returns: any = [];\r\n        this.items.forEach((item: any) => {\r\n            const deepReturns = findReturns(item);\r\n            if (deepReturns.length > 0) {\r\n                returns.push(...deepReturns);\r\n            }\r\n        });\r\n        if (\r\n            returns.length > 0 &&\r\n            returns.every(\r\n                (returnItem: any) =>\r\n                    returnItem.length === returns[0].length &&\r\n                    returnItem.map((item: any) => item.type).join('') ===\r\n                        returns[0].map((item: any) => item.type).join('')\r\n            )\r\n        ) {\r\n            returns[0].forEach((item: any) => {\r\n                if (BigNumber.isInstance(item)) {\r\n                    this.returns.push('uint256');\r\n                } else if (item.type) {\r\n                    this.returns.push(item.type);\r\n                } else {\r\n                    this.returns.push('unknown');\r\n                }\r\n            });\r\n        } else if (returns.length > 0) {\r\n            this.returns.push('<unknown>');\r\n        }\r\n    }\r\n}\r\n\r\nexport class Variable {\r\n    readonly name: string;\r\n    readonly label: string | false;\r\n    readonly types: any;\r\n\r\n    constructor(label: string | false, types: any) {\r\n        this.name = 'Variable';\r\n        this.label = label;\r\n        this.types = types;\r\n    }\r\n}\r\n\r\nexport class REQUIRE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly condition: any;\r\n\r\n    constructor(condition: any) {\r\n        this.name = 'REQUIRE';\r\n        this.wrapped = true;\r\n        this.condition = condition;\r\n    }\r\n\r\n    toString() {\r\n        return 'require(' + stringify(this.condition) + ');';\r\n    }\r\n}\r\n\r\nexport class JUMPI {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly condition: any;\r\n    readonly location: any;\r\n    readonly valid: boolean;\r\n    readonly true?: any;\r\n    readonly false?: any;\r\n    readonly payable?: boolean;\r\n\r\n    constructor(condition: any, location: any, ifTrue?: any, ifFalse?: any, skipped?: boolean) {\r\n        this.name = 'JUMPI';\r\n        this.wrapped = true;\r\n        this.condition = condition;\r\n        this.location = location;\r\n        if (skipped) {\r\n            this.valid = true;\r\n        } else if (ifTrue && ifFalse) {\r\n            this.valid = true;\r\n            this.true = ifTrue;\r\n            this.false = ifFalse;\r\n            if (\r\n                this.true.length >= 1 &&\r\n                this.true[0] instanceof REQUIRE &&\r\n                this.true[0].condition.name === 'ISZERO' &&\r\n                this.true[0].condition.item.name === 'CALLVALUE'\r\n            ) {\r\n                this.payable = false;\r\n                this.true.shift();\r\n            } else {\r\n                this.payable = true;\r\n            }\r\n        } else {\r\n            this.valid = false;\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        if (this.valid && this.true && this.false) {\r\n            return stringify(this.condition);\r\n        } else if (this.valid) {\r\n            return 'if' + stringify(this.condition) + ' goto(' + stringify(this.location) + ');';\r\n        } else {\r\n            return \"revert(\\\"Bad jump destination\\\");\";\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const jumpLocation = state.stack.pop();\r\n    const jumpCondition = state.stack.pop();\r\n    const opcodes = state.getOpcodes();\r\n    if (!BigNumber.isInstance(jumpLocation)) {\r\n        state.halted = true;\r\n        state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\r\n    } else {\r\n        const jumpLocationData = opcodes.find((o: any) => o.pc === jumpLocation.toJSNumber());\r\n        if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\r\n            state.halted = true;\r\n            state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\r\n        } else if (BigNumber.isInstance(jumpCondition)) {\r\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\r\n            if (\r\n                jumpIndex >= 0 &&\r\n                !jumpCondition.equals(0) &&\r\n                !(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps)\r\n            ) {\r\n                state.jumps[opcode.pc + ':' + jumpLocation.toJSNumber()] = true;\r\n                state.pc = jumpIndex;\r\n            }\r\n        } else if (\r\n            !(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps) &&\r\n            jumpCondition.name === 'SIG'\r\n        ) {\r\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\r\n            if (jumpIndex >= 0) {\r\n                const functionClone: any = state.clone();\r\n                functionClone.pc = jumpIndex;\r\n                const functionCloneTree = functionClone.parse();\r\n                state.functions[jumpCondition.hash] = new TopLevelFunction(\r\n                    functionCloneTree,\r\n                    jumpCondition.hash,\r\n                    functionClone.gasUsed\r\n                );\r\n                if (\r\n                    jumpCondition.hash in functionHashes &&\r\n                    functionCloneTree.length === 1 &&\r\n                    functionCloneTree[0].name === 'RETURN' &&\r\n                    functionCloneTree[0].items.every((item: any) => item.name === 'MappingLoad')\r\n                ) {\r\n                    functionCloneTree[0].items.forEach((item: any) => {\r\n                        const fullFunction = (functionHashes as any)[jumpCondition.hash];\r\n                        state.mappings[item.location].name = fullFunction.split('(')[0];\r\n                        if (\r\n                            item.structlocation &&\r\n                            !state.mappings[item.location].structs.includes(item.structlocation)\r\n                        ) {\r\n                            state.mappings[item.location].structs.push(item.structlocation);\r\n                        }\r\n                    });\r\n                    delete state.functions[jumpCondition.hash];\r\n                } else if (\r\n                    jumpCondition.hash in functionHashes &&\r\n                    state.functions[jumpCondition.hash].items.length === 1 &&\r\n                    state.functions[jumpCondition.hash].items[0].name === 'RETURN' &&\r\n                    state.functions[jumpCondition.hash].items[0].items.length === 1 &&\r\n                    state.functions[jumpCondition.hash].items[0].items[0].name === 'SLOAD' &&\r\n                    BigNumber.isInstance(\r\n                        state.functions[jumpCondition.hash].items[0].items[0].location\r\n                    )\r\n                ) {\r\n                    if (\r\n                        !(\r\n                            state.functions[jumpCondition.hash].items[0].items[0].location in\r\n                            state.variables\r\n                        )\r\n                    ) {\r\n                        const fullFunction = (functionHashes as any)[jumpCondition.hash];\r\n                        state.variables[\r\n                            state.functions[jumpCondition.hash].items[0].items[0].location\r\n                        ] = new Variable(fullFunction.split('(')[0], []);\r\n                        delete state.functions[jumpCondition.hash];\r\n                    } else {\r\n                        const fullFunction = (functionHashes as any)[jumpCondition.hash];\r\n                        state.variables[\r\n                            state.functions[jumpCondition.hash].items[0].items[0].location\r\n                        ].label = fullFunction.split('(')[0];\r\n                        delete state.functions[jumpCondition.hash];\r\n                    }\r\n                }\r\n            }\r\n        } else if (\r\n            !(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps) &&\r\n            ((jumpCondition.name === 'LT' &&\r\n                jumpCondition.left.name === 'CALLDATASIZE' &&\r\n                BigNumber.isInstance(jumpCondition.right) &&\r\n                jumpCondition.right.equals(4)) ||\r\n                (jumpCondition.name === 'ISZERO' && jumpCondition.item.name === 'CALLDATASIZE'))\r\n        ) {\r\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\r\n            if (jumpIndex >= 0) {\r\n                state.halted = true;\r\n                const trueClone: any = state.clone();\r\n                trueClone.pc = jumpIndex;\r\n                const trueCloneTree = trueClone.parse();\r\n                const falseClone = state.clone();\r\n                falseClone.pc = state.pc + 1;\r\n                const falseCloneTree: any = falseClone.parse();\r\n                if (\r\n                    trueCloneTree.length > 0 &&\r\n                    trueCloneTree.length === falseCloneTree.length &&\r\n                    trueCloneTree[0].name !== 'REVERT' &&\r\n                    trueCloneTree[0].name !== 'INVALID' &&\r\n                    trueCloneTree.map((item: any) => stringify(item)).join('') ===\r\n                        falseCloneTree.map((item: any) => stringify(item)).join('')\r\n                ) {\r\n                    state.functions[''] = new TopLevelFunction(\r\n                        trueCloneTree,\r\n                        '',\r\n                        trueCloneTree.gasUsed\r\n                    );\r\n                } else if (\r\n                    trueCloneTree.length > 0 &&\r\n                    trueCloneTree[0].name !== 'REVERT' &&\r\n                    trueCloneTree[0].name !== 'INVALID'\r\n                ) {\r\n                    state.instructions.push(\r\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\r\n                    );\r\n                }\r\n            } else {\r\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\r\n            }\r\n        } else if (!(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps)) {\r\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\r\n            state.jumps[opcode.pc + ':' + jumpLocation.toJSNumber()] = true;\r\n            if (jumpIndex >= 0) {\r\n                state.halted = true;\r\n                const trueClone: any = state.clone();\r\n                trueClone.pc = jumpIndex;\r\n                const trueCloneTree = trueClone.parse();\r\n                const falseClone = state.clone();\r\n                falseClone.pc = state.pc + 1;\r\n                const falseCloneTree: any = falseClone.parse();\r\n                if (\r\n                    (falseCloneTree.length === 1 &&\r\n                        'name' in falseCloneTree[0] &&\r\n                        (falseCloneTree[0].name === 'REVERT' &&\r\n                            falseCloneTree[0].items &&\r\n                            falseCloneTree[0].items.length === 0)) ||\r\n                    falseCloneTree[0].name === 'INVALID'\r\n                ) {\r\n                    state.instructions.push(new REQUIRE(jumpCondition));\r\n                    state.instructions.push(...trueCloneTree);\r\n                } else {\r\n                    state.instructions.push(\r\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\r\n                    );\r\n                }\r\n            } else {\r\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\r\n            }\r\n        } else {\r\n            state.instructions.push(new JUMPI(jumpCondition, jumpLocation, null, null, true));\r\n        }\r\n    }\r\n};\r\n","export const stringifyInstructions = (instructionTree: any, indentation = 0): string => {\r\n    let instructionLines = '';\r\n    instructionTree.forEach((instruction: any) => {\r\n        if (instruction.name === 'JUMPI' && instruction.false) {\r\n            const condition = instruction.toString();\r\n            const falseInstructions = instruction.false.filter((i: any) => i.debugLevel > 0);\r\n            if (falseInstructions.length === 1 && falseInstructions[0].name === 'JUMPI') {\r\n                instructionLines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\r\n                instructionLines += stringifyInstructions(instruction.true, indentation + 4);\r\n                instructionLines += ' '.repeat(indentation) + '} else ';\r\n                const elseOrElseIf = stringifyInstructions(instruction.false, indentation);\r\n                if (elseOrElseIf.trim().startsWith('if')) {\r\n                    instructionLines += elseOrElseIf.trim() + '\\n';\r\n                } else {\r\n                    instructionLines +=\r\n                        '{\\n' +\r\n                        elseOrElseIf\r\n                            .split('\\n')\r\n                            .filter(l => l)\r\n                            .map(l => ' '.repeat(4) + l)\r\n                            .join('\\n');\r\n                    instructionLines += '\\n' + ' '.repeat(indentation) + '}\\n';\r\n                }\r\n            } else {\r\n                instructionLines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\r\n                instructionLines += stringifyInstructions(instruction.true, indentation + 4);\r\n                instructionLines += ' '.repeat(indentation) + '} else {\\n';\r\n                instructionLines += stringifyInstructions(instruction.false, indentation + 4);\r\n                instructionLines += ' '.repeat(indentation) + '}\\n';\r\n            }\r\n        } else {\r\n            instructionLines += ' '.repeat(indentation) + instruction.toString() + '\\n';\r\n        }\r\n    });\r\n    return instructionLines;\r\n};\r\n\r\nexport default stringifyInstructions;\r\n","import * as _functions from '../data/functions.json';\r\nimport * as _events from '../data/events.json';\r\nimport * as _functionHashes from '../data/functionHashes.json';\r\nimport * as _eventHashes from '../data/eventHashes.json';\r\nimport Transaction from './classes/tx.class';\r\nimport EVM from './classes/evm.class';\r\n\r\nexport const functions: any = _functions as any;\r\nexport const events: any = _events as any;\r\nexport const functionHashes: any = _functionHashes as any;\r\nexport const eventHashes: any = _eventHashes as any;\r\n\r\nexport { EVM, Transaction };\r\n","import * as BigNumber from '../../node_modules/big-integer';\r\nimport * as functionHashes from '../../data/functionHashes.json';\r\n\r\nconst parseSingle = (data: any, type: any) => {\r\n    if (type === 'string') {\r\n        return '\"' + Buffer.from(data, 'hex').toString('utf8') + '\"';\r\n    } else if (type === 'address') {\r\n        return '0x' + data.substring(24);\r\n    } else if (type === 'uint256' || type === 'uint8') {\r\n        return BigNumber(data, 16).toString();\r\n    } else if (type === 'bool') {\r\n        return (!BigNumber(data, 16).isZero()).toString();\r\n    } else {\r\n        return data;\r\n    }\r\n};\r\n\r\nexport default class Transaction {\r\n    blockHash?: string;\r\n    blockNumber?: number;\r\n    from?: string;\r\n    gas?: number;\r\n    gasPrice?: number;\r\n    input?: string;\r\n    to?: string;\r\n    value?: number;\r\n\r\n    constructor(transactionObject?: any) {\r\n        if (transactionObject) {\r\n            if ('blockHash' in transactionObject) {\r\n                this.blockHash = transactionObject.blockHash;\r\n            }\r\n            if ('blockNumber' in transactionObject) {\r\n                this.blockNumber = transactionObject.blockNumber;\r\n            }\r\n            if ('from' in transactionObject) {\r\n                this.from = transactionObject.from;\r\n            }\r\n            if ('gas' in transactionObject) {\r\n                this.gas = transactionObject.gas;\r\n            }\r\n            if ('gasPrice' in transactionObject) {\r\n                this.gasPrice = transactionObject.gasPrice;\r\n            }\r\n            if ('input' in transactionObject) {\r\n                this.input = transactionObject.input.replace('0x', '');\r\n            }\r\n            if ('to' in transactionObject) {\r\n                this.to = transactionObject.to;\r\n            }\r\n            if ('value' in transactionObject) {\r\n                this.value = transactionObject.value;\r\n            }\r\n        }\r\n    }\r\n\r\n    setInput(input: string): void {\r\n        this.input = input.replace('0x', '');\r\n    }\r\n\r\n    getFunctionHash(): string | false {\r\n        if (this.input && this.input.length >= 8) {\r\n            return this.input.substr(0, 8);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getFunction(): string | false {\r\n        const functionHash = this.getFunctionHash();\r\n        if (functionHash && functionHash in functionHashes) {\r\n            return (functionHashes as any)[functionHash];\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getFunctionName(): string | false {\r\n        const rawFunction = this.getFunction();\r\n        if (rawFunction) {\r\n            return rawFunction.split('(')[0];\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getRawArguments(): string[] {\r\n        if (this.input && this.input.length >= 70) {\r\n            return this.input.substr(8).match(/.{1,64}/g)!;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    getArguments(descriptive: boolean = true): string[] {\r\n        const functionName = this.getFunction();\r\n        const functionArguments = this.getRawArguments();\r\n        if (functionName && this.input) {\r\n            const rawFunctionArguments = functionName\r\n                .split('(')[1]\r\n                .slice(0, -1)\r\n                .split(',');\r\n            if (\r\n                rawFunctionArguments.length === 1 &&\r\n                rawFunctionArguments[0] === '' &&\r\n                functionArguments.length === 0\r\n            ) {\r\n                return [];\r\n            } else {\r\n                const result: string[] = [];\r\n                for (let i = 0; i < rawFunctionArguments.length; i++) {\r\n                    const functionArgumentType = rawFunctionArguments[i] || 'unknown';\r\n                    const functionArgument = functionArguments[i];\r\n                    if (functionArgumentType === 'string') {\r\n                        const location = BigNumber(functionArgument, 16)\r\n                            .divide(32)\r\n                            .toJSNumber();\r\n                        const length = BigNumber(functionArguments[location], 16)\r\n                            .multiply(2)\r\n                            .toJSNumber();\r\n                        const data = this.input.substring(8).substr((location + 1) * 64, length);\r\n                        result.push(parseSingle(data, functionArgumentType));\r\n                    } else {\r\n                        result.push(parseSingle(functionArgument, functionArgumentType));\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n        } else {\r\n            return functionArguments;\r\n        }\r\n    }\r\n\r\n    isContractCreation(): boolean {\r\n        return this.to === null;\r\n    }\r\n}\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","const findOpcode = require('../../node_modules/ethereumjs-vm/dist/opcodes.js');\r\nimport * as functionHashes from '../../data/functionHashes.json';\r\nimport * as eventHashes from '../../data/eventHashes.json';\r\nimport opcodeFunctions from '../utils/opcodes';\r\nimport stringifyEvents from '../utils/stringifyEvents';\r\nimport stringifyStructs from '../utils/stringifyStructs';\r\nimport stringifyMappings from '../utils/stringifyMappings';\r\nimport stringifyVariables from '../utils/stringifyVariables';\r\nimport stringifyFunctions from '../utils/stringifyFunctions';\r\nimport stringifyInstructions from '../utils/stringifyInstructions';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport Stack from './stack.class';\r\nimport Memory from '../interfaces/memory.interface';\r\nimport Storage from '../interfaces/storage.interface';\r\nimport Jumps from '../interfaces/jumps.interface';\r\n\r\nclass EVM {\r\n    pc: number;\r\n    stack: Stack;\r\n    memory: Memory;\r\n    opcodes: Opcode[];\r\n    instructions: any;\r\n    storage: Storage;\r\n    jumps: Jumps;\r\n    code: Buffer;\r\n    mappings: any;\r\n    layer: number;\r\n    halted: boolean;\r\n    functions: any;\r\n    variables: any;\r\n    events: any;\r\n    gasUsed: number;\r\n\r\n    constructor(code: string | Buffer) {\r\n        this.pc = 0;\r\n        this.opcodes = [];\r\n        this.instructions = [];\r\n        this.stack = new Stack();\r\n        this.memory = {};\r\n        this.storage = {};\r\n        this.jumps = {};\r\n        this.mappings = {};\r\n        this.layer = 0;\r\n        this.halted = false;\r\n        this.functions = {};\r\n        this.variables = {};\r\n        this.events = {};\r\n        this.gasUsed = 0;\r\n        if (code instanceof Buffer) {\r\n            this.code = code;\r\n        } else {\r\n            this.code = Buffer.from(code.replace('0x', ''), 'hex');\r\n        }\r\n    }\r\n\r\n    clone(): EVM {\r\n        const clone = new EVM(this.code);\r\n        clone.pc = this.pc;\r\n        clone.opcodes = this.opcodes;\r\n        clone.stack = this.stack.clone();\r\n        clone.memory = { ...this.memory };\r\n        clone.storage = this.storage;\r\n        clone.jumps = { ...this.jumps };\r\n        clone.mappings = this.mappings;\r\n        clone.layer = this.layer + 1;\r\n        clone.functions = this.functions;\r\n        clone.variables = this.variables;\r\n        clone.events = this.events;\r\n        clone.gasUsed = this.gasUsed;\r\n        return clone;\r\n    }\r\n\r\n    getBytecode(): string {\r\n        return '0x' + this.code.toString('hex');\r\n    }\r\n\r\n    getOpcodes(): Opcode[] {\r\n        if (this.opcodes.length === 0) {\r\n            for (let index = 0; index < this.code.length; index++) {\r\n                const currentOp = findOpcode(this.code[index], true);\r\n                currentOp.pc = index;\r\n                this.opcodes.push(currentOp);\r\n                if (currentOp.name.startsWith('PUSH')) {\r\n                    const pushDataLength = this.code[index] - 0x5f;\r\n                    const pushData = this.code.slice(index + 1, index + pushDataLength + 1);\r\n                    currentOp.pushData = pushData;\r\n                    index += pushDataLength;\r\n                }\r\n            }\r\n        }\r\n        return this.opcodes;\r\n    }\r\n\r\n    getFunctions(): string[] {\r\n        return [\r\n            ...new Set(\r\n                this.getOpcodes()\r\n                    .filter(opcode => opcode.name === 'PUSH4')\r\n                    .map(opcode => (opcode.pushData ? opcode.pushData.toString('hex') : ''))\r\n                    .filter(hash => hash in functionHashes)\r\n                    .map(hash => (functionHashes as any)[hash])\r\n            )\r\n        ];\r\n    }\r\n\r\n    getEvents(): string[] {\r\n        return [\r\n            ...new Set(\r\n                this.getOpcodes()\r\n                    .filter(opcode => opcode.name === 'PUSH32')\r\n                    .map(opcode => (opcode.pushData ? opcode.pushData.toString('hex') : ''))\r\n                    .filter(hash => hash in eventHashes)\r\n                    .map(hash => (eventHashes as any)[hash])\r\n            )\r\n        ];\r\n    }\r\n\r\n    getJumpDestinations(): number[] {\r\n        return this.getOpcodes()\r\n            .filter(opcode => opcode.name === 'JUMPDEST')\r\n            .map(opcode => opcode.pc);\r\n    }\r\n\r\n    getTotalGas(): number {\r\n        return this.getOpcodes()\r\n            .map(opcode => opcode.fee)\r\n            .reduce((a: number, b: number) => a + b);\r\n    }\r\n\r\n    getSwarmHash(): string | boolean {\r\n        const regex = /a165627a7a72305820([a-f0-9]{64})0029$/;\r\n        const bytecode = this.getBytecode();\r\n        const match = bytecode.match(regex);\r\n        if (match && match[1]) {\r\n            return 'bzzr://' + match[1];\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    reset(): void {\r\n        this.pc = 0;\r\n        this.instructions = [];\r\n        this.stack.reset();\r\n        this.memory = {};\r\n        this.storage = {};\r\n        this.jumps = {};\r\n        this.mappings = {};\r\n        this.functions = {};\r\n        this.variables = {};\r\n        this.events = {};\r\n        this.gasUsed = 0;\r\n    }\r\n\r\n    parse(): any[] {\r\n        if (this.instructions.length === 0) {\r\n            const opcodes = this.getOpcodes();\r\n            for (this.pc; this.pc < opcodes.length && !this.halted; this.pc++) {\r\n                const opcode = opcodes[this.pc];\r\n                this.gasUsed += opcode.fee;\r\n                if (!(opcode.name in opcodeFunctions)) {\r\n                    throw new Error('Unknown OPCODE: ' + opcode.name);\r\n                } else {\r\n                    (opcodeFunctions as any)[opcode.name](opcode, this);\r\n                }\r\n            }\r\n        }\r\n        return this.instructions;\r\n    }\r\n\r\n    decompile(): string {\r\n        const instructionTree = this.parse();\r\n        const events = stringifyEvents(this.events, this.getEvents());\r\n        const structs = stringifyStructs(this.mappings);\r\n        const mappings = stringifyMappings(this.mappings);\r\n        const variables = stringifyVariables(this.variables);\r\n        const functions = Object.keys(this.functions)\r\n            .map((functionName: string) =>\r\n                stringifyFunctions(functionName, this.functions[functionName])\r\n            )\r\n            .join('');\r\n        const code = stringifyInstructions(instructionTree);\r\n        return events + structs + mappings + variables + functions + code;\r\n    }\r\n}\r\n\r\nexport default EVM;\r\n","'use strict';\n\nvar codes = {\n  // 0x0 range - arithmetic ops\n  // name, baseCost, off stack, on stack, dynamic, async\n  0x00: ['STOP', 0, 0, 0, false],\n  0x01: ['ADD', 3, 2, 1, false],\n  0x02: ['MUL', 5, 2, 1, false],\n  0x03: ['SUB', 3, 2, 1, false],\n  0x04: ['DIV', 5, 2, 1, false],\n  0x05: ['SDIV', 5, 2, 1, false],\n  0x06: ['MOD', 5, 2, 1, false],\n  0x07: ['SMOD', 5, 2, 1, false],\n  0x08: ['ADDMOD', 8, 3, 1, false],\n  0x09: ['MULMOD', 8, 3, 1, false],\n  0x0a: ['EXP', 10, 2, 1, false],\n  0x0b: ['SIGNEXTEND', 5, 2, 1, false],\n\n  // 0x10 range - bit ops\n  0x10: ['LT', 3, 2, 1, false],\n  0x11: ['GT', 3, 2, 1, false],\n  0x12: ['SLT', 3, 2, 1, false],\n  0x13: ['SGT', 3, 2, 1, false],\n  0x14: ['EQ', 3, 2, 1, false],\n  0x15: ['ISZERO', 3, 1, 1, false],\n  0x16: ['AND', 3, 2, 1, false],\n  0x17: ['OR', 3, 2, 1, false],\n  0x18: ['XOR', 3, 2, 1, false],\n  0x19: ['NOT', 3, 1, 1, false],\n  0x1a: ['BYTE', 3, 2, 1, false],\n  0x1b: ['SHL', 3, 2, 1, false],\n  0x1c: ['SHR', 3, 2, 1, false],\n  0x1d: ['SAR', 3, 2, 1, false],\n\n  // 0x20 range - crypto\n  0x20: ['SHA3', 30, 2, 1, false],\n\n  // 0x30 range - closure state\n  0x30: ['ADDRESS', 2, 0, 1, true],\n  0x31: ['BALANCE', 400, 1, 1, true, true],\n  0x32: ['ORIGIN', 2, 0, 1, true],\n  0x33: ['CALLER', 2, 0, 1, true],\n  0x34: ['CALLVALUE', 2, 0, 1, true],\n  0x35: ['CALLDATALOAD', 3, 1, 1, true],\n  0x36: ['CALLDATASIZE', 2, 0, 1, true],\n  0x37: ['CALLDATACOPY', 3, 3, 0, true],\n  0x38: ['CODESIZE', 2, 0, 1, false],\n  0x39: ['CODECOPY', 3, 3, 0, false],\n  0x3a: ['GASPRICE', 2, 0, 1, false],\n  0x3b: ['EXTCODESIZE', 700, 1, 1, true, true],\n  0x3c: ['EXTCODECOPY', 700, 4, 0, true, true],\n  0x3d: ['RETURNDATASIZE', 2, 0, 1, true],\n  0x3e: ['RETURNDATACOPY', 3, 3, 0, true],\n  0x3f: ['EXTCODEHASH', 400, 1, 1, true, true],\n\n  // '0x40' range - block operations\n  0x40: ['BLOCKHASH', 20, 1, 1, true, true],\n  0x41: ['COINBASE', 2, 0, 1, true],\n  0x42: ['TIMESTAMP', 2, 0, 1, true],\n  0x43: ['NUMBER', 2, 0, 1, true],\n  0x44: ['DIFFICULTY', 2, 0, 1, true],\n  0x45: ['GASLIMIT', 2, 0, 1, true],\n\n  // 0x50 range - 'storage' and execution\n  0x50: ['POP', 2, 1, 0, false],\n  0x51: ['MLOAD', 3, 1, 1, false],\n  0x52: ['MSTORE', 3, 2, 0, false],\n  0x53: ['MSTORE8', 3, 2, 0, false],\n  0x54: ['SLOAD', 200, 1, 1, true, true],\n  0x55: ['SSTORE', 0, 2, 0, true, true],\n  0x56: ['JUMP', 8, 1, 0, false],\n  0x57: ['JUMPI', 10, 2, 0, false],\n  0x58: ['PC', 2, 0, 1, false],\n  0x59: ['MSIZE', 2, 0, 1, false],\n  0x5a: ['GAS', 2, 0, 1, false],\n  0x5b: ['JUMPDEST', 1, 0, 0, false],\n\n  // 0x60, range\n  0x60: ['PUSH', 3, 0, 1, false],\n  0x61: ['PUSH', 3, 0, 1, false],\n  0x62: ['PUSH', 3, 0, 1, false],\n  0x63: ['PUSH', 3, 0, 1, false],\n  0x64: ['PUSH', 3, 0, 1, false],\n  0x65: ['PUSH', 3, 0, 1, false],\n  0x66: ['PUSH', 3, 0, 1, false],\n  0x67: ['PUSH', 3, 0, 1, false],\n  0x68: ['PUSH', 3, 0, 1, false],\n  0x69: ['PUSH', 3, 0, 1, false],\n  0x6a: ['PUSH', 3, 0, 1, false],\n  0x6b: ['PUSH', 3, 0, 1, false],\n  0x6c: ['PUSH', 3, 0, 1, false],\n  0x6d: ['PUSH', 3, 0, 1, false],\n  0x6e: ['PUSH', 3, 0, 1, false],\n  0x6f: ['PUSH', 3, 0, 1, false],\n  0x70: ['PUSH', 3, 0, 1, false],\n  0x71: ['PUSH', 3, 0, 1, false],\n  0x72: ['PUSH', 3, 0, 1, false],\n  0x73: ['PUSH', 3, 0, 1, false],\n  0x74: ['PUSH', 3, 0, 1, false],\n  0x75: ['PUSH', 3, 0, 1, false],\n  0x76: ['PUSH', 3, 0, 1, false],\n  0x77: ['PUSH', 3, 0, 1, false],\n  0x78: ['PUSH', 3, 0, 1, false],\n  0x79: ['PUSH', 3, 0, 1, false],\n  0x7a: ['PUSH', 3, 0, 1, false],\n  0x7b: ['PUSH', 3, 0, 1, false],\n  0x7c: ['PUSH', 3, 0, 1, false],\n  0x7d: ['PUSH', 3, 0, 1, false],\n  0x7e: ['PUSH', 3, 0, 1, false],\n  0x7f: ['PUSH', 3, 0, 1, false],\n\n  0x80: ['DUP', 3, 0, 1, false],\n  0x81: ['DUP', 3, 0, 1, false],\n  0x82: ['DUP', 3, 0, 1, false],\n  0x83: ['DUP', 3, 0, 1, false],\n  0x84: ['DUP', 3, 0, 1, false],\n  0x85: ['DUP', 3, 0, 1, false],\n  0x86: ['DUP', 3, 0, 1, false],\n  0x87: ['DUP', 3, 0, 1, false],\n  0x88: ['DUP', 3, 0, 1, false],\n  0x89: ['DUP', 3, 0, 1, false],\n  0x8a: ['DUP', 3, 0, 1, false],\n  0x8b: ['DUP', 3, 0, 1, false],\n  0x8c: ['DUP', 3, 0, 1, false],\n  0x8d: ['DUP', 3, 0, 1, false],\n  0x8e: ['DUP', 3, 0, 1, false],\n  0x8f: ['DUP', 3, 0, 1, false],\n\n  0x90: ['SWAP', 3, 0, 0, false],\n  0x91: ['SWAP', 3, 0, 0, false],\n  0x92: ['SWAP', 3, 0, 0, false],\n  0x93: ['SWAP', 3, 0, 0, false],\n  0x94: ['SWAP', 3, 0, 0, false],\n  0x95: ['SWAP', 3, 0, 0, false],\n  0x96: ['SWAP', 3, 0, 0, false],\n  0x97: ['SWAP', 3, 0, 0, false],\n  0x98: ['SWAP', 3, 0, 0, false],\n  0x99: ['SWAP', 3, 0, 0, false],\n  0x9a: ['SWAP', 3, 0, 0, false],\n  0x9b: ['SWAP', 3, 0, 0, false],\n  0x9c: ['SWAP', 3, 0, 0, false],\n  0x9d: ['SWAP', 3, 0, 0, false],\n  0x9e: ['SWAP', 3, 0, 0, false],\n  0x9f: ['SWAP', 3, 0, 0, false],\n\n  0xa0: ['LOG', 375, 2, 0, false],\n  0xa1: ['LOG', 375, 3, 0, false],\n  0xa2: ['LOG', 375, 4, 0, false],\n  0xa3: ['LOG', 375, 5, 0, false],\n  0xa4: ['LOG', 375, 6, 0, false],\n\n  // '0xf0' range - closures\n  0xf0: ['CREATE', 32000, 3, 1, true, true],\n  0xf1: ['CALL', 700, 7, 1, true, true],\n  0xf2: ['CALLCODE', 700, 7, 1, true, true],\n  0xf3: ['RETURN', 0, 2, 0, false],\n  0xf4: ['DELEGATECALL', 700, 6, 1, true, true],\n  0xf5: ['CREATE2', 32000, 4, 1, true, true],\n  0xfa: ['STATICCALL', 700, 6, 1, true, true],\n  0xfd: ['REVERT', 0, 2, 0, false],\n\n  // '0x70', range - other\n  0xfe: ['INVALID', 0, 0, 0, false],\n  0xff: ['SELFDESTRUCT', 5000, 1, 0, false, true]\n};\n\nmodule.exports = function (op, full, freeLogs) {\n  var code = codes[op] ? codes[op] : ['INVALID', 0, 0, 0, false, false];\n  var opcode = code[0];\n\n  if (full) {\n    if (opcode === 'LOG') {\n      opcode += op - 0xa0;\n    }\n\n    if (opcode === 'PUSH') {\n      opcode += op - 0x5f;\n    }\n\n    if (opcode === 'DUP') {\n      opcode += op - 0x7f;\n    }\n\n    if (opcode === 'SWAP') {\n      opcode += op - 0x8f;\n    }\n  }\n\n  var fee = code[1];\n\n  if (freeLogs) {\n    if (opcode === 'LOG') {\n      fee = 0;\n    }\n  }\n\n  return { name: opcode, opcode: op, fee: fee, in: code[2], out: code[3], dynamic: code[4], async: code[5] };\n};","import STOP from '../opcodes/stop';\nimport ADD from '../opcodes/add';\nimport MUL from '../opcodes/mul';\nimport SUB from '../opcodes/sub';\nimport DIV from '../opcodes/div';\nimport MOD from '../opcodes/mod';\nimport ADDMOD from '../opcodes/addmod';\nimport MULMOD from '../opcodes/mulmod';\nimport EXP from '../opcodes/exp';\nimport SIGNEXTEND from '../opcodes/signextend';\nimport LT from '../opcodes/lt';\nimport GT from '../opcodes/gt';\nimport EQ from '../opcodes/eq';\nimport ISZERO from '../opcodes/iszero';\nimport AND from '../opcodes/and';\nimport OR from '../opcodes/or';\nimport XOR from '../opcodes/xor';\nimport NOT from '../opcodes/not';\nimport BYTE from '../opcodes/byte';\nimport SHL from '../opcodes/shl';\nimport SHR from '../opcodes/shr';\nimport SAR from '../opcodes/sar';\nimport SHA3 from '../opcodes/sha3';\nimport ADDRESS from '../opcodes/address';\nimport BALANCE from '../opcodes/balance';\nimport ORIGIN from '../opcodes/origin';\nimport CALLER from '../opcodes/caller';\nimport CALLVALUE from '../opcodes/callvalue';\nimport CALLDATALOAD from '../opcodes/calldataload';\nimport CALLDATASIZE from '../opcodes/calldatasize';\nimport CALLDATACOPY from '../opcodes/calldatacopy';\nimport CODESIZE from '../opcodes/codesize';\nimport CODECOPY from '../opcodes/codecopy';\nimport GASPRICE from '../opcodes/gasprice';\nimport EXTCODESIZE from '../opcodes/extcodesize';\nimport EXTCODECOPY from '../opcodes/extcodecopy';\nimport RETURNDATASIZE from '../opcodes/returndatasize';\nimport RETURNDATACOPY from '../opcodes/returndatacopy';\nimport EXTCODEHASH from '../opcodes/extcodehash';\nimport BLOCKHASH from '../opcodes/blockhash';\nimport COINBASE from '../opcodes/coinbase';\nimport TIMESTAMP from '../opcodes/timestamp';\nimport NUMBER from '../opcodes/number';\nimport DIFFICULTY from '../opcodes/difficulty';\nimport GASLIMIT from '../opcodes/gaslimit';\nimport POP from '../opcodes/pop';\nimport MLOAD from '../opcodes/mload';\nimport MSTORE from '../opcodes/mstore';\nimport SLOAD from '../opcodes/sload';\nimport SSTORE from '../opcodes/sstore';\nimport JUMP from '../opcodes/jump';\nimport JUMPI from '../opcodes/jumpi';\nimport PC from '../opcodes/pc';\nimport MSIZE from '../opcodes/msize';\nimport GAS from '../opcodes/gas';\nimport JUMPDEST from '../opcodes/jumpdest';\nimport PUSH from '../opcodes/push';\nimport DUP from '../opcodes/dup';\nimport SWAP from '../opcodes/swap';\nimport LOG from '../opcodes/log';\nimport CREATE from '../opcodes/create';\nimport CALL from '../opcodes/call';\nimport CALLCODE from '../opcodes/callcode';\nimport RETURN from '../opcodes/return';\nimport DELEGATECALL from '../opcodes/delegatecall';\nimport CREATE2 from '../opcodes/create2';\nimport STATICCALL from '../opcodes/staticcall';\nimport REVERT from '../opcodes/revert';\nimport INVALID from '../opcodes/invalid';\nimport SELFDESTRUCT from '../opcodes/selfdestruct';\n\nexport default {\n    STOP,\n    ADD,\n    MUL,\n    SUB,\n    DIV,\n    SDIV: DIV,\n    MOD,\n    SMOD: MOD,\n    ADDMOD,\n    MULMOD,\n    EXP,\n    SIGNEXTEND,\n    LT,\n    GT,\n    SLT: LT,\n    SGT: GT,\n    EQ,\n    ISZERO,\n    AND,\n    OR,\n    XOR,\n    NOT,\n    BYTE,\n    SHL,\n    SHR,\n    SAR,\n    SHA3,\n    ADDRESS,\n    BALANCE,\n    ORIGIN,\n    CALLER,\n    CALLVALUE,\n    CALLDATALOAD,\n    CALLDATASIZE,\n    CALLDATACOPY,\n    CODESIZE,\n    CODECOPY,\n    GASPRICE,\n    EXTCODESIZE,\n    EXTCODECOPY,\n    RETURNDATASIZE,\n    RETURNDATACOPY,\n    EXTCODEHASH,\n    BLOCKHASH,\n    COINBASE,\n    TIMESTAMP,\n    NUMBER,\n    DIFFICULTY,\n    GASLIMIT,\n    POP,\n    MLOAD,\n    MSTORE,\n    MSTORE8: MSTORE,\n    SLOAD,\n    SSTORE,\n    JUMP,\n    JUMPI,\n    PC,\n    MSIZE,\n    GAS,\n    JUMPDEST,\n    PUSH1: PUSH,\n    PUSH2: PUSH,\n    PUSH3: PUSH,\n    PUSH4: PUSH,\n    PUSH5: PUSH,\n    PUSH6: PUSH,\n    PUSH7: PUSH,\n    PUSH8: PUSH,\n    PUSH9: PUSH,\n    PUSH10: PUSH,\n    PUSH11: PUSH,\n    PUSH12: PUSH,\n    PUSH13: PUSH,\n    PUSH14: PUSH,\n    PUSH15: PUSH,\n    PUSH16: PUSH,\n    PUSH17: PUSH,\n    PUSH18: PUSH,\n    PUSH19: PUSH,\n    PUSH20: PUSH,\n    PUSH21: PUSH,\n    PUSH22: PUSH,\n    PUSH23: PUSH,\n    PUSH24: PUSH,\n    PUSH25: PUSH,\n    PUSH26: PUSH,\n    PUSH27: PUSH,\n    PUSH28: PUSH,\n    PUSH29: PUSH,\n    PUSH30: PUSH,\n    PUSH31: PUSH,\n    PUSH32: PUSH,\n    DUP1: DUP,\n    DUP2: DUP,\n    DUP3: DUP,\n    DUP4: DUP,\n    DUP5: DUP,\n    DUP6: DUP,\n    DUP7: DUP,\n    DUP8: DUP,\n    DUP9: DUP,\n    DUP10: DUP,\n    DUP11: DUP,\n    DUP12: DUP,\n    DUP13: DUP,\n    DUP14: DUP,\n    DUP15: DUP,\n    DUP16: DUP,\n    SWAP1: SWAP,\n    SWAP2: SWAP,\n    SWAP3: SWAP,\n    SWAP4: SWAP,\n    SWAP5: SWAP,\n    SWAP6: SWAP,\n    SWAP7: SWAP,\n    SWAP8: SWAP,\n    SWAP9: SWAP,\n    SWAP10: SWAP,\n    SWAP11: SWAP,\n    SWAP12: SWAP,\n    SWAP13: SWAP,\n    SWAP14: SWAP,\n    SWAP15: SWAP,\n    SWAP16: SWAP,\n    LOG0: LOG,\n    LOG1: LOG,\n    LOG2: LOG,\n    LOG3: LOG,\n    LOG4: LOG,\n    CREATE,\n    CALL,\n    CALLCODE,\n    RETURN,\n    DELEGATECALL,\n    CREATE2,\n    STATICCALL,\n    REVERT,\n    INVALID,\n    SELFDESTRUCT\n};\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class STOP {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'STOP';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'return;';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.halted = true;\r\n    state.instructions.push(new STOP());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class DIV {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'DIV';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' / ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.divide(right));\r\n    } else if (BigNumber.isInstance(right) && right.equals(1)) {\r\n        state.stack.push(left);\r\n    } else {\r\n        state.stack.push(new DIV(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport { ADD } from './add';\r\nimport { MOD } from './mod';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    const mod = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right) && BigNumber.isInstance(mod)) {\r\n        state.stack.push(left.add(right).mod(mod));\r\n    } else if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(new MOD(left.add(right), mod));\r\n    } else {\r\n        state.stack.push(new MOD(new ADD(left, right), mod));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport { MUL } from './mul';\r\nimport { MOD } from './mod';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    const mod = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right) && BigNumber.isInstance(mod)) {\r\n        state.stack.push(left.multiply(right).mod(mod));\r\n    } else if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(new MOD(left.multiply(right), mod));\r\n    } else {\r\n        state.stack.push(new MOD(new MUL(left, right), mod));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class EXP {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'EXP';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' ** ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.pow(right));\r\n    } else {\r\n        state.stack.push(new EXP(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport { SHL } from './shl';\r\nimport { SAR } from './sar';\r\nimport { SUB } from './sub';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(\r\n            right.shiftLeft(BigNumber(32).subtract(left)).shiftRight(BigNumber(32).subtract(left))\r\n        );\r\n    } else if (BigNumber.isInstance(left)) {\r\n        state.stack.push(\r\n            new SAR(new SHL(right, BigNumber(32).subtract(left)), BigNumber(32).subtract(left))\r\n        );\r\n    } else {\r\n        state.stack.push(\r\n            new SAR(new SHL(right, new SUB(BigNumber(32), left)), new SUB(BigNumber(32), left))\r\n        );\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class SIG {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly hash: string;\r\n\r\n    constructor(hash: string) {\r\n        this.name = 'SIG';\r\n        this.wrapped = false;\r\n        this.hash = hash;\r\n    }\r\n\r\n    toString() {\r\n        return 'msg.sig == ' + this.hash;\r\n    }\r\n}\r\n\r\nexport class EQ {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'EQ';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' == ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    let left = state.stack.pop();\r\n    let right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(BigNumber(left.equals(right) === true ? 1 : 0));\r\n    } else {\r\n        if (\r\n            BigNumber.isInstance(left) &&\r\n            right.name === 'DIV' &&\r\n            BigNumber.isInstance(right.right)\r\n        ) {\r\n            left = left.multiply(right.right);\r\n            right = right.left;\r\n        }\r\n        if (\r\n            BigNumber.isInstance(right) &&\r\n            left.name === 'DIV' &&\r\n            BigNumber.isInstance(left.right)\r\n        ) {\r\n            right = right.multiply(left.right);\r\n            left = left.left;\r\n        }\r\n        if (\r\n            BigNumber.isInstance(left) &&\r\n            /^[0]+$/.test(left.toString(16).substring(8)) &&\r\n            right.name === 'CALLDATALOAD' &&\r\n            right.location.equals(0)\r\n        ) {\r\n            state.stack.push(\r\n                new SIG(\r\n                    '0'.repeat(64 - left.toString(16).length) +\r\n                        left.toString(16).substring(0, 8 - (64 - left.toString(16).length))\r\n                )\r\n            );\r\n        } else if (\r\n            BigNumber.isInstance(right) &&\r\n            /^[0]+$/.test(right.toString(16).substring(8)) &&\r\n            left.name === 'CALLDATALOAD' &&\r\n            left.location.equals(0)\r\n        ) {\r\n            state.stack.push(\r\n                new SIG(\r\n                    '0'.repeat(64 - right.toString(16).length) +\r\n                        right.toString(16).substring(0, 8 - (64 - right.toString(16).length))\r\n                )\r\n            );\r\n        } else {\r\n            state.stack.push(new EQ(left, right));\r\n        }\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport { LT } from './lt';\r\nimport { GT } from './gt';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class ISZERO {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly item: any;\r\n\r\n    constructor(item: any) {\r\n        this.name = 'ISZERO';\r\n        this.wrapped = true;\r\n        this.item = item;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.item) + ' == 0';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const item = state.stack.pop();\r\n    if (BigNumber.isInstance(item)) {\r\n        state.stack.push(BigNumber(item.isZero() === true ? 1 : 0));\r\n    } else if (item.name === 'LT') {\r\n        if (item.equal) {\r\n            state.stack.push(new GT(item.left, item.right));\r\n        } else {\r\n            state.stack.push(new GT(item.left, item.right, true));\r\n        }\r\n    } else if (item.name === 'GT') {\r\n        if (item.equal) {\r\n            state.stack.push(new LT(item.left, item.right));\r\n        } else {\r\n            state.stack.push(new LT(item.left, item.right, true));\r\n        }\r\n    } else if (item instanceof ISZERO) {\r\n        state.stack.push(item.item);\r\n    } else {\r\n        state.stack.push(new ISZERO(item));\r\n    }\r\n    /* == -> != */\r\n    /* != -> == */\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class AND {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'AND';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' && ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.and(right));\r\n    } else if (BigNumber.isInstance(left) && /^[f]+$/.test(left.toString(16))) {\r\n        right.size = left.toString(16).length;\r\n        state.stack.push(right);\r\n    } else if (BigNumber.isInstance(right) && /^[f]+$/.test(right.toString(16))) {\r\n        left.size = right.toString(16).length;\r\n        state.stack.push(left);\r\n        /*} else if (\r\n        BigNumber.isInstance(left) &&\r\n        left.equals('1461501637330902918203684832716283019655932542975')\r\n    ) {*/\r\n        /* 2 ** 160 */\r\n        /*    state.stack.push(right);\r\n    } else if (\r\n        BigNumber.isInstance(right) &&\r\n        right.equals('1461501637330902918203684832716283019655932542975')\r\n    ) {*/\r\n        /* 2 ** 160 */\r\n        /*    state.stack.push(left);*/\r\n    } else if (\r\n        BigNumber.isInstance(left) &&\r\n        right instanceof AND &&\r\n        BigNumber.isInstance(right.left) &&\r\n        left.equals(right.left)\r\n    ) {\r\n        state.stack.push(right.right);\r\n    } else {\r\n        state.stack.push(new AND(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class OR {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'OR';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' || ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.or(right));\r\n    } else {\r\n        state.stack.push(new OR(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class XOR {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'XOR';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' ^ ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.xor(right));\r\n    } else {\r\n        state.stack.push(new XOR(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class NOT {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly item: any;\r\n\r\n    constructor(item: any) {\r\n        this.name = 'AND';\r\n        this.wrapped = true;\r\n        this.item = item;\r\n    }\r\n\r\n    toString() {\r\n        return '~' + stringify(this.item);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const item = state.stack.pop();\r\n    if (BigNumber.isInstance(item)) {\r\n        state.stack.push(item.not());\r\n    } else {\r\n        state.stack.push(new NOT(item));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class BYTE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly position: any;\r\n    readonly data: any;\r\n\r\n    constructor(position: any, data: any) {\r\n        this.name = 'BYTE';\r\n        this.wrapped = true;\r\n        this.position = position;\r\n        this.data = data;\r\n    }\r\n\r\n    toString() {\r\n        return '(' + stringify(this.data) + ' >> ' + stringify(this.position) + ') & 1';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const position = state.stack.pop();\r\n    const data = state.stack.pop();\r\n    if (BigNumber.isInstance(data) && BigNumber.isInstance(position)) {\r\n        state.stack.push(data.shiftRight(position).and(1));\r\n    } else {\r\n        state.stack.push(new BYTE(position, data));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class SHR {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'SHR';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' >>> ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.shiftRight(right));\r\n    } else {\r\n        state.stack.push(new SHR(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport { MLOAD } from './mload';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class SHA3 {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly memoryStart?: any;\r\n    readonly memoryLength?: any;\r\n    readonly items: any;\r\n\r\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\r\n        this.name = 'SHA3';\r\n        this.wrapped = false;\r\n        if (memoryStart && memoryLength) {\r\n            this.memoryStart = memoryStart;\r\n            this.memoryLength = memoryLength;\r\n        } else {\r\n            this.items = items;\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        if (this.items) {\r\n            return 'keccak256(' + this.items.map((item: any) => stringify(item)).join(', ') + ')';\r\n        } else {\r\n            return (\r\n                'keccak256(memory[' +\r\n                stringify(this.memoryStart) +\r\n                ':(' +\r\n                stringify(this.memoryStart) +\r\n                '+' +\r\n                stringify(this.memoryLength) +\r\n                ')])'\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\r\n        const items = [];\r\n        for (\r\n            let i = memoryStart.toJSNumber();\r\n            i < memoryStart.add(memoryLength).toJSNumber();\r\n            i += 32\r\n        ) {\r\n            if (i in state.memory) {\r\n                items.push(state.memory[i]);\r\n            } else {\r\n                items.push(new MLOAD(i));\r\n            }\r\n        }\r\n        state.stack.push(new SHA3(items));\r\n    } else {\r\n        state.stack.push(new SHA3([], memoryStart, memoryLength));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class ADDRESS {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'ADDRESS';\r\n        this.type = 'address';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'this';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new ADDRESS());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class BALANCE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly address: any;\r\n\r\n    constructor(address: any) {\r\n        this.name = 'BALANCE';\r\n        this.wrapped = true;\r\n        this.address = address;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.address) + '.balance';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const address = state.stack.pop();\r\n    state.stack.push(new BALANCE(address));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class ORIGIN {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'ORIGIN';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'tx.origin';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new ORIGIN());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class CALLER {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'CALLER';\r\n        this.name = 'address';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'msg.sender';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new CALLER());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class CALLVALUE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'CALLVALUE';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'msg.value';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new CALLVALUE());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class CALLDATALOAD {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly returntype?: string;\r\n    readonly wrapped: boolean;\r\n    readonly location: any;\r\n\r\n    constructor(location: any) {\r\n        this.name = 'CALLDATALOAD';\r\n        this.wrapped = false;\r\n        this.location = location;\r\n    }\r\n\r\n    toString() {\r\n        if (BigNumber.isInstance(this.location) && this.location.isZero()) {\r\n            return 'msg.data';\r\n        } else if (\r\n            BigNumber.isInstance(this.location) &&\r\n            this.location\r\n                .subtract(4)\r\n                .mod(32)\r\n                .isZero()\r\n        ) {\r\n            return (\r\n                '_arg' +\r\n                this.location\r\n                    .subtract(4)\r\n                    .divide(32)\r\n                    .toString()\r\n            );\r\n        } else {\r\n            return 'msg.data[' + stringify(this.location) + ']';\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const startLocation = state.stack.pop();\r\n    state.stack.push(new CALLDATALOAD(startLocation));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class CALLDATASIZE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'CALLDATASIZE';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'msg.data.length';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new CALLDATASIZE());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class CALLDATACOPY {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly startLocation: any;\r\n    readonly copyLength: any;\r\n\r\n    constructor(startLocation: any, copyLength: any) {\r\n        this.name = 'CALLDATACOPY';\r\n        this.wrapped = true;\r\n        this.startLocation = startLocation;\r\n        this.copyLength = copyLength;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'msg.data[' +\r\n            this.startLocation +\r\n            ':(' +\r\n            this.startLocation +\r\n            '+' +\r\n            this.copyLength +\r\n            ')];'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const memoryLocation = state.stack.pop();\r\n    const startLocation = state.stack.pop();\r\n    const copyLength = state.stack.pop();\r\n    state.memory[memoryLocation] = new CALLDATACOPY(startLocation, copyLength);\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class CODESIZE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'CODESIZE';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'this.code.length';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new CODESIZE());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class CODECOPY {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly startLocation: any;\r\n    readonly copyLength: any;\r\n\r\n    constructor(startLocation: any, copyLength: any) {\r\n        this.name = 'CODECOPY';\r\n        this.wrapped = true;\r\n        this.startLocation = startLocation;\r\n        this.copyLength = copyLength;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'this.code[' +\r\n            stringify(this.startLocation) +\r\n            ':(' +\r\n            stringify(this.startLocation) +\r\n            '+' +\r\n            stringify(this.copyLength) +\r\n            ')]'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const memoryLocation = state.stack.pop();\r\n    const startLocation = state.stack.pop();\r\n    const copyLength = state.stack.pop();\r\n    state.memory[memoryLocation] = new CODECOPY(startLocation, copyLength);\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class GASPRICE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'GASPRICE';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'tx.gasprice';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new GASPRICE());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class EXTCODESIZE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly address: any;\r\n\r\n    constructor(address: any) {\r\n        this.name = 'EXTCODESIZE';\r\n        this.wrapped = true;\r\n        this.address = address;\r\n    }\r\n\r\n    toString() {\r\n        return 'address(' + stringify(this.address) + ').code.length';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const address = state.stack.pop();\r\n    state.stack.push(new EXTCODESIZE(address));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class EXTCODECOPY {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly address: any;\r\n    readonly startLocation: any;\r\n    readonly copyLength: any;\r\n\r\n    constructor(address: any, startLocation: any, copyLength: any) {\r\n        this.name = 'EXTCODECOPY';\r\n        this.wrapped = true;\r\n        this.address = address;\r\n        this.startLocation = startLocation;\r\n        this.copyLength = copyLength;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'address(' +\r\n            stringify(this.address) +\r\n            ').code[' +\r\n            stringify(this.startLocation) +\r\n            ':(' +\r\n            stringify(this.startLocation) +\r\n            '+' +\r\n            stringify(this.copyLength) +\r\n            ')]'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const address = state.stack.pop();\r\n    const memoryLocation = state.stack.pop();\r\n    const startLocation = state.stack.pop();\r\n    const copyLength = state.stack.pop();\r\n    state.memory[memoryLocation] = new EXTCODECOPY(address, startLocation, copyLength);\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class RETURNDATASIZE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'RETURNDATASIZE';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'output.length';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new RETURNDATASIZE());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class RETURNDATACOPY {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly returnDataPosition: any;\r\n    readonly returnDataSize: any;\r\n\r\n    constructor(returnDataPosition: any, returnDataSize: any) {\r\n        this.name = 'RETURNDATACOPY';\r\n        this.wrapped = true;\r\n        this.returnDataPosition = returnDataPosition;\r\n        this.returnDataSize = returnDataSize;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'output[' +\r\n            stringify(this.returnDataPosition) +\r\n            ':(' +\r\n            stringify(this.returnDataPosition) +\r\n            '+' +\r\n            stringify(this.returnDataSize) +\r\n            ')]'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const memoryPosition = state.stack.pop();\r\n    const returnDataPosition = state.stack.pop();\r\n    const returnDataSize = state.stack.pop();\r\n    state.memory[memoryPosition] = new RETURNDATACOPY(returnDataPosition, returnDataSize);\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class EXTCODEHASH {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly address: any;\r\n\r\n    constructor(address: any) {\r\n        this.name = 'EXTCODEHASH';\r\n        this.wrapped = true;\r\n        this.address = address;\r\n    }\r\n\r\n    toString() {\r\n        return 'keccak256(address(' + stringify(this.address) + ').code)';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const address = state.stack.pop();\r\n    state.stack.push(new EXTCODEHASH(address));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class BLOCKHASH {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly number: any;\r\n\r\n    constructor(blockNumber: any) {\r\n        this.name = 'BLOCKHASH';\r\n        this.wrapped = true;\r\n        this.number = blockNumber;\r\n    }\r\n\r\n    toString() {\r\n        return 'block.blockhash(' + stringify(this.number) + ')';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const blockNumber = state.stack.pop();\r\n    state.stack.push(new BLOCKHASH(blockNumber));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class COINBASE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'COINBASE';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'block.coinbase';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new COINBASE());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class TIMESTAMP {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'TIMESTAMP';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'block.timestamp';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new TIMESTAMP());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class NUMBER {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'NUMBER';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'block.number';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new NUMBER());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class DIFFICULTY {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'DIFFICULTY';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'block.difficulty';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new DIFFICULTY());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class GASLIMIT {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'GASLIMIT';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'block.gaslimit';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new GASLIMIT());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.pop();\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class MSTORE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly location: any;\r\n    readonly data: any;\r\n\r\n    constructor(location: any, data: any) {\r\n        this.name = 'MSTORE';\r\n        this.wrapped = true;\r\n        this.location = location;\r\n        this.data = data;\r\n    }\r\n\r\n    toString() {\r\n        return 'memory[' + stringify(this.location) + '] = ' + stringify(this.data) + ';';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const storeLocation = state.stack.pop();\r\n    const storeData = state.stack.pop();\r\n    if (BigNumber.isInstance(storeLocation)) {\r\n        state.memory[storeLocation.toJSNumber()] = storeData;\r\n    } else {\r\n        state.instructions.push(new MSTORE(storeLocation, storeData));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nconst parseMapping = (...items: any[]) => {\r\n    const mappings: any = [];\r\n    items.forEach((item2: any) => {\r\n        if (item2.name === 'SHA3' && item2.items) {\r\n            mappings.push(...parseMapping(...item2.items));\r\n        } else {\r\n            mappings.push(item2);\r\n        }\r\n    });\r\n    return mappings;\r\n};\r\n\r\nexport class MappingLoad {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly location: any;\r\n    readonly count: any;\r\n    readonly items: any;\r\n    readonly structlocation?: any;\r\n    readonly mappings: any;\r\n\r\n    constructor(mappings: any, location: any, items: any, count: any, structlocation?: any) {\r\n        this.name = 'MappingLoad';\r\n        this.wrapped = false;\r\n        this.location = location;\r\n        this.count = count;\r\n        this.items = items;\r\n        this.structlocation = structlocation;\r\n        this.mappings = mappings;\r\n    }\r\n\r\n    toString() {\r\n        let mappingName = 'mapping' + (this.count + 1);\r\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\r\n            mappingName = this.mappings()[this.location].name;\r\n        }\r\n        if (this.structlocation) {\r\n            return (\r\n                mappingName +\r\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\r\n                '[' +\r\n                this.structlocation.toString() +\r\n                ']'\r\n            );\r\n        } else {\r\n            return (\r\n                mappingName + this.items.map((item: any) => '[' + stringify(item) + ']').join('')\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport class SLOAD {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly location: any;\r\n    readonly variables: any;\r\n\r\n    constructor(location: any, variables: any) {\r\n        this.name = 'SLOAD';\r\n        this.wrapped = false;\r\n        this.location = location;\r\n        this.variables = variables;\r\n    }\r\n\r\n    toString() {\r\n        if (BigNumber.isInstance(this.location) && this.location.toString() in this.variables()) {\r\n            if (this.variables()[this.location.toString()].label) {\r\n                return this.variables()[this.location.toString()].label;\r\n            } else {\r\n                return (\r\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1)\r\n                );\r\n            }\r\n        } else {\r\n            return 'storage[' + stringify(this.location) + ']';\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const storeLocation = state.stack.pop();\r\n    if (storeLocation.name === 'SHA3') {\r\n        const mappingItems = parseMapping(...storeLocation.items);\r\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\r\n            BigNumber.isInstance(mappingItem)\r\n        );\r\n        const mappingParts = mappingItems.filter(\r\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\r\n        );\r\n        if (mappingLocation && mappingParts.length > 0) {\r\n            if (!(mappingLocation in state.mappings)) {\r\n                state.mappings[mappingLocation] = {\r\n                    name: false,\r\n                    structs: [],\r\n                    keys: [],\r\n                    values: []\r\n                };\r\n            }\r\n            state.mappings[mappingLocation].keys.push(mappingParts);\r\n            state.stack.push(\r\n                new MappingLoad(\r\n                    () => state.mappings,\r\n                    mappingLocation,\r\n                    mappingParts,\r\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\r\n                )\r\n            );\r\n        } else {\r\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\r\n        }\r\n    } else if (\r\n        storeLocation.name === 'ADD' &&\r\n        storeLocation.left.name === 'SHA3' &&\r\n        BigNumber.isInstance(storeLocation.right)\r\n    ) {\r\n        const mappingItems = parseMapping(...storeLocation.left.items);\r\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\r\n            BigNumber.isInstance(mappingItem)\r\n        );\r\n        const mappingParts = mappingItems.filter(\r\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\r\n        );\r\n        if (mappingLocation && mappingParts.length > 0) {\r\n            if (!(mappingLocation in state.mappings)) {\r\n                state.mappings[mappingLocation] = {\r\n                    name: false,\r\n                    structs: [],\r\n                    keys: [],\r\n                    values: []\r\n                };\r\n            }\r\n            state.mappings[mappingLocation].keys.push(mappingParts);\r\n            state.stack.push(\r\n                new MappingLoad(\r\n                    () => state.mappings,\r\n                    mappingLocation,\r\n                    mappingParts,\r\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\r\n                    storeLocation.right\r\n                )\r\n            );\r\n        } else {\r\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\r\n        }\r\n    } else if (\r\n        storeLocation.name === 'ADD' &&\r\n        BigNumber.isInstance(storeLocation.left) &&\r\n        storeLocation.right.name === 'SHA3'\r\n    ) {\r\n        const mappingItems = parseMapping(...storeLocation.right.items);\r\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\r\n            BigNumber.isInstance(mappingItem)\r\n        );\r\n        const mappingParts = mappingItems.filter(\r\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\r\n        );\r\n        if (mappingLocation && mappingParts.length > 0) {\r\n            if (!(mappingLocation in state.mappings)) {\r\n                state.mappings[mappingLocation] = {\r\n                    name: false,\r\n                    structs: [],\r\n                    keys: [],\r\n                    values: []\r\n                };\r\n            }\r\n            state.mappings[mappingLocation].keys.push(mappingParts);\r\n            state.stack.push(\r\n                new MappingLoad(\r\n                    () => state.mappings,\r\n                    mappingLocation,\r\n                    mappingParts,\r\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\r\n                    storeLocation.left\r\n                )\r\n            );\r\n        } else {\r\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\r\n        }\r\n    } else {\r\n        state.stack.push(new SLOAD(storeLocation, () => state.variables));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\nimport { Variable } from './jumpi';\r\n\r\nconst parseMapping = (...items: any[]) => {\r\n    const mappings: any = [];\r\n    items.forEach((item2: any) => {\r\n        if (item2.name === 'SHA3' && item2.items) {\r\n            mappings.push(...parseMapping(...item2.items));\r\n        } else {\r\n            mappings.push(item2);\r\n        }\r\n    });\r\n    return mappings;\r\n};\r\n\r\nexport class MappingStore {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly location: any;\r\n    readonly count: any;\r\n    readonly items: any;\r\n    readonly data: any;\r\n    readonly structlocation?: any;\r\n    readonly mappings: any;\r\n\r\n    constructor(\r\n        mappings: any,\r\n        location: any,\r\n        items: any,\r\n        data: any,\r\n        count: any,\r\n        structlocation?: any\r\n    ) {\r\n        this.name = 'MappingStore';\r\n        this.wrapped = false;\r\n        this.location = location;\r\n        this.items = items;\r\n        this.data = data;\r\n        this.count = count;\r\n        this.structlocation = structlocation;\r\n        this.mappings = mappings;\r\n    }\r\n\r\n    toString() {\r\n        let mappingName = 'mapping' + (this.count + 1);\r\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\r\n            mappingName = this.mappings()[this.location].name;\r\n        }\r\n        if (\r\n            this.data.name === 'ADD' &&\r\n            this.data.right.name === 'MappingLoad' &&\r\n            stringify(this.data.right.location) === stringify(this.location)\r\n        ) {\r\n            return (\r\n                mappingName +\r\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\r\n                ' += ' +\r\n                stringify(this.data.left) +\r\n                ';'\r\n            );\r\n        } else if (\r\n            this.data.name === 'SUB' &&\r\n            this.data.left.name === 'MappingLoad' &&\r\n            stringify(this.data.left.location) === stringify(this.location)\r\n        ) {\r\n            return (\r\n                mappingName +\r\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\r\n                ' -= ' +\r\n                stringify(this.data.right) +\r\n                ';'\r\n            );\r\n        } else {\r\n            return (\r\n                mappingName +\r\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\r\n                ' = ' +\r\n                stringify(this.data) +\r\n                ';'\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport class SSTORE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly location: any;\r\n    readonly data: any;\r\n    readonly variables: any;\r\n\r\n    constructor(location: any, data: any, variables: any) {\r\n        this.name = 'SSTORE';\r\n        this.wrapped = true;\r\n        this.location = location;\r\n        this.data = data;\r\n        this.variables = variables;\r\n        if (BigNumber.isInstance(this.location) && this.location.toString() in this.variables()) {\r\n            this.variables()[this.location.toString()].types.push(() => this.data.type);\r\n        } else if (\r\n            BigNumber.isInstance(this.location) &&\r\n            !(this.location.toString() in this.variables())\r\n        ) {\r\n            this.variables()[this.location.toString()] = new Variable(false, [\r\n                () => this.data.type\r\n            ]);\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        let variableName = 'storage[' + stringify(this.location) + ']';\r\n        if (BigNumber.isInstance(this.location) && this.location.toString() in this.variables()) {\r\n            if (this.variables()[this.location.toString()].label) {\r\n                variableName = this.variables()[this.location.toString()].label;\r\n            } else {\r\n                variableName =\r\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1);\r\n            }\r\n        }\r\n        if (\r\n            this.data.name === 'ADD' &&\r\n            this.data.right.name === 'SLOAD' &&\r\n            stringify(this.data.right.location) === stringify(this.location)\r\n        ) {\r\n            return variableName + ' += ' + stringify(this.data.left) + ';';\r\n        } else if (\r\n            this.data.name === 'SUB' &&\r\n            this.data.left.name === 'SLOAD' &&\r\n            stringify(this.data.left.location) === stringify(this.location)\r\n        ) {\r\n            return variableName + ' -= ' + stringify(this.data.right) + ';';\r\n        } else {\r\n            return variableName + ' = ' + stringify(this.data) + ';';\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const storeLocation = state.stack.pop();\r\n    const storeData = state.stack.pop();\r\n    if (storeLocation.name === 'SHA3') {\r\n        const mappingItems = parseMapping(...storeLocation.items);\r\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\r\n            BigNumber.isInstance(mappingItem)\r\n        );\r\n        const mappingParts = mappingItems.filter(\r\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\r\n        );\r\n        if (mappingLocation && mappingParts.length > 0) {\r\n            if (!(mappingLocation in state.mappings)) {\r\n                state.mappings[mappingLocation] = {\r\n                    name: false,\r\n                    structs: [],\r\n                    keys: [],\r\n                    values: []\r\n                };\r\n            }\r\n            state.mappings[mappingLocation].keys.push(mappingParts);\r\n            state.mappings[mappingLocation].values.push(storeData);\r\n            state.instructions.push(\r\n                new MappingStore(\r\n                    () => state.mappings,\r\n                    mappingLocation,\r\n                    mappingParts,\r\n                    storeData,\r\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\r\n                )\r\n            );\r\n        } else {\r\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\r\n        }\r\n    } else if (\r\n        storeLocation.name === 'ADD' &&\r\n        storeLocation.left.name === 'SHA3' &&\r\n        BigNumber.isInstance(storeLocation.right)\r\n    ) {\r\n        const mappingItems = parseMapping(...storeLocation.left.items);\r\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\r\n            BigNumber.isInstance(mappingItem)\r\n        );\r\n        const mappingParts = mappingItems.filter(\r\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\r\n        );\r\n        if (mappingLocation && mappingParts.length > 0) {\r\n            if (!(mappingLocation in state.mappings)) {\r\n                state.mappings[mappingLocation] = {\r\n                    name: false,\r\n                    structs: [],\r\n                    keys: [],\r\n                    values: []\r\n                };\r\n            }\r\n            state.mappings[mappingLocation].keys.push(mappingParts);\r\n            state.instructions.push(\r\n                new MappingStore(\r\n                    () => state.mappings,\r\n                    mappingLocation,\r\n                    mappingParts,\r\n                    storeData,\r\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\r\n                    storeLocation.right\r\n                )\r\n            );\r\n        } else {\r\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\r\n        }\r\n    } else if (\r\n        storeLocation.name === 'ADD' &&\r\n        BigNumber.isInstance(storeLocation.left) &&\r\n        storeLocation.right.name === 'SHA3'\r\n    ) {\r\n        const mappingItems = parseMapping(...storeLocation.right.items);\r\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\r\n            BigNumber.isInstance(mappingItem)\r\n        );\r\n        const mappingParts = mappingItems.filter(\r\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\r\n        );\r\n        if (mappingLocation && mappingParts.length > 0) {\r\n            if (!(mappingLocation in state.mappings)) {\r\n                state.mappings[mappingLocation] = {\r\n                    name: false,\r\n                    structs: [],\r\n                    keys: [],\r\n                    values: []\r\n                };\r\n            }\r\n            state.mappings[mappingLocation].keys.push(mappingParts);\r\n            state.instructions.push(\r\n                new MappingStore(\r\n                    () => state.mappings,\r\n                    mappingLocation,\r\n                    mappingParts,\r\n                    storeData,\r\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\r\n                    storeLocation.left\r\n                )\r\n            );\r\n        } else {\r\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\r\n        }\r\n    } else if (\r\n        false &&\r\n        BigNumber.isInstance(storeLocation) &&\r\n        storeLocation.toString() in state.variables &&\r\n        storeData.type &&\r\n        !state.variables[storeLocation.toString()].types.includes(storeData.type)\r\n    ) {\r\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\r\n        state.variables[storeLocation.toString()].types.push(storeData.type);\r\n    } else {\r\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class JUMP {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly valid: boolean;\r\n    readonly location: any;\r\n\r\n    constructor(location: any, bad?: boolean) {\r\n        this.name = 'JUMP';\r\n        this.wrapped = false;\r\n        this.location = location;\r\n        this.valid = true;\r\n        if (bad) {\r\n            this.valid = false;\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        if (!this.valid) {\r\n            return \"revert(\\\"Bad jump destination\\\");\";\r\n        } else {\r\n            return 'goto(' + stringify(this.location) + ');';\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const jumpLocation = state.stack.pop();\r\n    if (!BigNumber.isInstance(jumpLocation)) {\r\n        state.halted = true;\r\n        state.instructions.push(new JUMP(jumpLocation, true));\r\n    } else {\r\n        const opcodes = state.getOpcodes();\r\n        const jumpLocationData = opcodes.find((o: any) => o.pc === jumpLocation.toJSNumber());\r\n        if (!jumpLocationData) {\r\n            state.halted = true;\r\n            state.instructions.push(new JUMP(jumpLocation, true));\r\n        } else {\r\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\r\n            if (!(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps)) {\r\n                if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\r\n                    state.halted = true;\r\n                    state.instructions.push(new JUMP(jumpLocation, true));\r\n                } else if (\r\n                    jumpLocationData &&\r\n                    jumpIndex >= 0 &&\r\n                    jumpLocationData.name === 'JUMPDEST'\r\n                ) {\r\n                    state.jumps[opcode.pc + ':' + jumpLocation.toJSNumber()] = true;\r\n                    state.pc = jumpIndex;\r\n                } else {\r\n                    state.halted = true;\r\n                    state.instructions.push(new JUMP(jumpLocation, true));\r\n                }\r\n            } else {\r\n                state.halted = true;\r\n                state.instructions.push(new JUMP(jumpLocation));\r\n            }\r\n        }\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(BigNumber(opcode.pc));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class MSIZE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'MSIZE';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'memory.length';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new MSIZE());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class GAS {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'GAS';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'gasleft()';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new GAS());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    /* Empty */\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const pushDataLength = parseInt(opcode.name.replace('PUSH', ''), 10);\r\n    state.stack.push(BigNumber(opcode.pushData!.toString('hex'), 16));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const duplicateLocation = parseInt(opcode.name.replace('DUP', ''), 10) - 1;\r\n    state.stack.duplicate(duplicateLocation);\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const swapLocation = parseInt(opcode.name.replace('SWAP', ''), 10);\r\n    state.stack.swap(swapLocation);\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport { MLOAD } from './mload';\r\nimport * as eventHashes from '../../data/eventHashes.json';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\n\r\nexport class LOG {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly memoryStart?: any;\r\n    readonly memoryLength?: any;\r\n    readonly items?: any;\r\n    readonly topics: any;\r\n    readonly eventName?: string;\r\n\r\n    constructor(topics: any, items?: any, memoryStart?: any, memoryLength?: any) {\r\n        this.name = 'LOG';\r\n        this.wrapped = true;\r\n        this.topics = topics;\r\n        if (\r\n            this.topics.length > 0 &&\r\n            BigNumber.isInstance(this.topics[0]) &&\r\n            this.topics[0].toString(16) in eventHashes\r\n        ) {\r\n            this.eventName = (eventHashes as any)[this.topics[0].toString(16)].split('(')[0];\r\n            this.topics.shift();\r\n        }\r\n        if (this.memoryStart && this.memoryLength) {\r\n            this.memoryStart = memoryStart;\r\n            this.memoryLength = memoryLength;\r\n        } else {\r\n            this.items = items;\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        if (this.eventName) {\r\n            return (\r\n                'emit ' + this.eventName + '(' + [...this.topics, ...this.items].join(', ') + ')'\r\n            );\r\n        } else {\r\n            return 'log(' + [...this.topics, ...this.items].join(', ') + ')';\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const topicsCount = parseInt(opcode.name.replace('LOG', ''), 10);\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    const topics = [];\r\n    for (let i = 0; i < topicsCount; i++) {\r\n        topics.push(state.stack.pop());\r\n    }\r\n    if (topics.length > 0) {\r\n        const eventTopic = topics[0].toString(16);\r\n        if (!(eventTopic in state.events)) {\r\n            state.events[eventTopic] = {};\r\n            state.events[eventTopic].indexedCount = topics.length - 1;\r\n            if (eventTopic in eventHashes) {\r\n                state.events[eventTopic].label = (eventHashes as any)[eventTopic];\r\n            }\r\n        }\r\n    }\r\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\r\n        const items = [];\r\n        for (\r\n            let i = memoryStart.toJSNumber();\r\n            i < memoryStart.add(memoryLength).toJSNumber();\r\n            i += 32\r\n        ) {\r\n            if (i in state.memory) {\r\n                items.push(state.memory[i]);\r\n            } else {\r\n                items.push(new MLOAD(i));\r\n            }\r\n        }\r\n        if (topics.length === 0) {\r\n            if (!('anonymous' in state.events)) {\r\n                state.events.anonymous = [];\r\n            }\r\n            state.events.anonymous.push({ items });\r\n        }\r\n        state.instructions.push(new LOG(topics, items));\r\n    } else {\r\n        state.instructions.push(new LOG(topics, [], memoryStart, memoryLength));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class CREATE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly memoryStart: any;\r\n    readonly memoryLength: any;\r\n    readonly value: any;\r\n\r\n    constructor(memoryStart: any, memoryLength: any, value: any) {\r\n        this.name = 'CREATE';\r\n        this.name = 'address';\r\n        this.wrapped = true;\r\n        this.memoryStart = memoryStart;\r\n        this.memoryLength = memoryLength;\r\n        this.value = value;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            '(new Contract(memory[' +\r\n            stringify(this.memoryStart) +\r\n            ':(' +\r\n            stringify(this.memoryStart) +\r\n            '+' +\r\n            stringify(this.memoryLength) +\r\n            ')]).value(' +\r\n            stringify(this.value) +\r\n            ')).address'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const value = state.stack.pop();\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    state.stack.push(new CREATE(memoryStart, memoryLength, value));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class CALL {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly gas: any;\r\n    readonly address: any;\r\n    readonly value: any;\r\n    readonly memoryStart: any;\r\n    readonly memoryLength: any;\r\n    readonly outputStart: any;\r\n    readonly outputLength: any;\r\n\r\n    constructor(\r\n        gas: any,\r\n        address: any,\r\n        value: any,\r\n        memoryStart: any,\r\n        memoryLength: any,\r\n        outputStart: any,\r\n        outputLength: any\r\n    ) {\r\n        this.name = 'CALL';\r\n        this.wrapped = true;\r\n        this.gas = gas;\r\n        this.address = address;\r\n        this.value = value;\r\n        this.memoryStart = memoryStart;\r\n        this.memoryLength = memoryLength;\r\n        this.outputStart = outputStart;\r\n        this.outputLength = outputLength;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'call(' +\r\n            stringify(this.gas) +\r\n            ',' +\r\n            stringify(this.address) +\r\n            ',' +\r\n            stringify(this.value) +\r\n            ',' +\r\n            stringify(this.memoryStart) +\r\n            ',' +\r\n            stringify(this.memoryLength) +\r\n            ',' +\r\n            stringify(this.outputStart) +\r\n            ',' +\r\n            stringify(this.outputLength) +\r\n            ')'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const gas = state.stack.pop();\r\n    const address = state.stack.pop();\r\n    const value = state.stack.pop();\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    const outputStart = state.stack.pop();\r\n    const outputLength = state.stack.pop();\r\n    state.stack.push(\r\n        new CALL(gas, address, value, memoryStart, memoryLength, outputStart, outputLength)\r\n    );\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class CALLCODE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly gas: any;\r\n    readonly address: any;\r\n    readonly value: any;\r\n    readonly memoryStart: any;\r\n    readonly memoryLength: any;\r\n    readonly outputStart: any;\r\n    readonly outputLength: any;\r\n\r\n    constructor(\r\n        gas: any,\r\n        address: any,\r\n        value: any,\r\n        memoryStart: any,\r\n        memoryLength: any,\r\n        outputStart: any,\r\n        outputLength: any\r\n    ) {\r\n        this.name = 'CALLCODE';\r\n        this.wrapped = true;\r\n        this.gas = gas;\r\n        this.address = address;\r\n        this.value = value;\r\n        this.memoryStart = memoryStart;\r\n        this.memoryLength = memoryLength;\r\n        this.outputStart = outputStart;\r\n        this.outputLength = outputLength;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'callcode(' +\r\n            stringify(this.gas) +\r\n            ',' +\r\n            stringify(this.address) +\r\n            ',' +\r\n            stringify(this.value) +\r\n            ',' +\r\n            stringify(this.memoryStart) +\r\n            ',' +\r\n            stringify(this.memoryLength) +\r\n            ',' +\r\n            stringify(this.outputStart) +\r\n            ',' +\r\n            stringify(this.outputLength) +\r\n            ')'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const gas = state.stack.pop();\r\n    const address = state.stack.pop();\r\n    const value = state.stack.pop();\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    const outputStart = state.stack.pop();\r\n    const outputLength = state.stack.pop();\r\n    state.stack.push(\r\n        new CALLCODE(gas, address, value, memoryStart, memoryLength, outputStart, outputLength)\r\n    );\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport { MLOAD } from './mload';\r\nimport { hex2a } from '../utils/hex';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class RETURN {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly memoryStart?: any;\r\n    readonly memoryLength?: any;\r\n    readonly items: any;\r\n\r\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\r\n        this.name = 'RETURN';\r\n        this.wrapped = true;\r\n        if (memoryStart && memoryLength) {\r\n            this.memoryStart = memoryStart;\r\n            this.memoryLength = memoryLength;\r\n        } else {\r\n            this.items = items;\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        if (this.memoryStart && this.memoryLength) {\r\n            return (\r\n                'return memory[' +\r\n                stringify(this.memoryStart) +\r\n                ':(' +\r\n                stringify(this.memoryStart) +\r\n                '+' +\r\n                stringify(this.memoryLength) +\r\n                ')];'\r\n            );\r\n        } else if (this.items.length === 0) {\r\n            return 'return;';\r\n        } else if (\r\n            this.items.length === 1 &&\r\n            (BigNumber.isInstance(this.items[0]) || this.items[0].static)\r\n        ) {\r\n            return 'return ' + this.items[0] + ';';\r\n        } else if (\r\n            this.items.length === 3 &&\r\n            this.items.every((item: any) => BigNumber.isInstance(item)) &&\r\n            this.items[0].equals(32)\r\n        ) {\r\n            return 'return \"' + hex2a(this.items[2].toString(16)) + '\";';\r\n        } else {\r\n            return 'return(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    state.halted = true;\r\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\r\n        const items = [];\r\n        for (\r\n            let i = memoryStart.toJSNumber();\r\n            i < memoryStart.add(memoryLength).toJSNumber();\r\n            i += 32\r\n        ) {\r\n            if (i in state.memory) {\r\n                items.push(state.memory[i]);\r\n            } else {\r\n                items.push(new MLOAD(i));\r\n            }\r\n        }\r\n        state.instructions.push(new RETURN(items));\r\n    } else {\r\n        state.instructions.push(new RETURN([], memoryStart, memoryLength));\r\n    }\r\n};\r\n","export function hex2a(hexx: any) {\n    const hex = hexx.toString();\n    let str = '';\n    for (let i = 0; i < hex.length && hex.substr(i, 2) !== '00'; i += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    }\n    return str;\n}\n\nexport function pad32(data: string) {\n    if (data.length >= 64) {\n        return data;\n    } else {\n        return '0'.repeat(64 - data.length) + data;\n    }\n}\n\nexport function isHex(h: any) {\n    return /^[0-9a-f-]+$/.test(h);\n}\n\nexport default (data: any) => {\n    if (isHex(data)) {\n        const pieces = data.match(/.{1,64}/g);\n        if (pieces.length === 3 && parseInt(pieces[0], 16) === 32) {\n            const stringLength = parseInt(pieces[1], 16) * 2;\n            const stringData = hex2a(pieces[2].substr(0, stringLength));\n            return '\"' + stringData + '\"';\n        } else if (!isNaN(parseInt(data, 16))) {\n            return parseInt(data, 16).toString();\n        } else {\n            return data;\n        }\n    } else {\n        return data;\n    }\n};\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class DELEGATECALL {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly gas: any;\r\n    readonly address: any;\r\n    readonly memoryStart: any;\r\n    readonly memoryLength: any;\r\n    readonly outputStart: any;\r\n    readonly outputLength: any;\r\n\r\n    constructor(\r\n        gas: any,\r\n        address: any,\r\n        memoryStart: any,\r\n        memoryLength: any,\r\n        outputStart: any,\r\n        outputLength: any\r\n    ) {\r\n        this.name = 'DELEGATECALL';\r\n        this.wrapped = true;\r\n        this.gas = gas;\r\n        this.address = address;\r\n        this.memoryStart = memoryStart;\r\n        this.memoryLength = memoryLength;\r\n        this.outputStart = outputStart;\r\n        this.outputLength = outputLength;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'delegatecall(' +\r\n            stringify(this.gas) +\r\n            ',' +\r\n            stringify(this.address) +\r\n            ',' +\r\n            stringify(this.memoryStart) +\r\n            ',' +\r\n            stringify(this.memoryLength) +\r\n            ',' +\r\n            stringify(this.outputStart) +\r\n            ',' +\r\n            stringify(this.outputLength) +\r\n            ')'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const gas = state.stack.pop();\r\n    const address = state.stack.pop();\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    const outputStart = state.stack.pop();\r\n    const outputLength = state.stack.pop();\r\n    state.stack.push(\r\n        new DELEGATECALL(gas, address, memoryStart, memoryLength, outputStart, outputLength)\r\n    );\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class CREATE2 {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly memoryStart: any;\r\n    readonly memoryLength: any;\r\n    readonly value: any;\r\n\r\n    constructor(memoryStart: any, memoryLength: any, value: any) {\r\n        this.name = 'CREATE2';\r\n        this.wrapped = true;\r\n        this.memoryStart = memoryStart;\r\n        this.memoryLength = memoryLength;\r\n        this.value = value;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            '(new Contract(memory[' +\r\n            stringify(this.memoryStart) +\r\n            ':(' +\r\n            stringify(this.memoryStart) +\r\n            '+' +\r\n            stringify(this.memoryLength) +\r\n            ')]).value(' +\r\n            stringify(this.value) +\r\n            ')).address'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const value = state.stack.pop();\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    state.stack.push(new CREATE2(memoryStart, memoryLength, value));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class STATICCALL {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly gas: any;\r\n    readonly address: any;\r\n    readonly memoryStart: any;\r\n    readonly memoryLength: any;\r\n    readonly outputStart: any;\r\n    readonly outputLength: any;\r\n\r\n    constructor(\r\n        gas: any,\r\n        address: any,\r\n        memoryStart: any,\r\n        memoryLength: any,\r\n        outputStart: any,\r\n        outputLength: any\r\n    ) {\r\n        this.name = 'STATICCALL';\r\n        this.wrapped = true;\r\n        this.gas = gas;\r\n        this.address = address;\r\n        this.memoryStart = memoryStart;\r\n        this.memoryLength = memoryLength;\r\n        this.outputStart = outputStart;\r\n        this.outputLength = outputLength;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'staticcall(' +\r\n            stringify(this.gas) +\r\n            ',' +\r\n            stringify(this.address) +\r\n            ',' +\r\n            stringify(this.memoryStart) +\r\n            ',' +\r\n            stringify(this.memoryLength) +\r\n            ',' +\r\n            stringify(this.outputStart) +\r\n            ',' +\r\n            stringify(this.outputLength) +\r\n            ')'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const gas = state.stack.pop();\r\n    const address = state.stack.pop();\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    const outputStart = state.stack.pop();\r\n    const outputLength = state.stack.pop();\r\n    state.stack.push(\r\n        new STATICCALL(gas, address, memoryStart, memoryLength, outputStart, outputLength)\r\n    );\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport { MLOAD } from './mload';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class REVERT {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly memoryStart?: any;\r\n    readonly memoryLength?: any;\r\n    readonly items: any;\r\n\r\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\r\n        this.name = 'REVERT';\r\n        this.wrapped = true;\r\n        if (memoryStart && memoryLength) {\r\n            this.memoryStart = memoryStart;\r\n            this.memoryLength = memoryLength;\r\n        } else {\r\n            this.items = items;\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        if (this.items) {\r\n            return 'revert(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\r\n        } else {\r\n            return (\r\n                'revert(memory[' +\r\n                stringify(this.memoryStart) +\r\n                ':(' +\r\n                stringify(this.memoryStart) +\r\n                '+' +\r\n                stringify(this.memoryLength) +\r\n                ')]);'\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    state.halted = true;\r\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\r\n        const items = [];\r\n        for (\r\n            let i = memoryStart.toJSNumber();\r\n            i < memoryStart.add(memoryLength).toJSNumber();\r\n            i += 32\r\n        ) {\r\n            if (i in state.memory) {\r\n                items.push(state.memory[i]);\r\n            } else {\r\n                items.push(new MLOAD(i));\r\n            }\r\n        }\r\n        state.instructions.push(new REVERT(items));\r\n    } else {\r\n        state.instructions.push(new REVERT([], memoryStart, memoryLength));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class INVALID {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly opcode: any;\r\n\r\n    constructor(opcode: any) {\r\n        this.name = 'INVALID';\r\n        this.wrapped = true;\r\n        this.opcode = opcode;\r\n    }\r\n\r\n    toString() {\r\n        return 'revert(\"Invalid instruction (0x' + this.opcode.toString(16) + ')\");';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.halted = true;\r\n    state.instructions.push(new INVALID(opcode.opcode));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class SELFDESTRUCT {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly address: any;\r\n\r\n    constructor(address: any) {\r\n        this.name = 'SELFDESTRUCT';\r\n        this.wrapped = true;\r\n        this.address = address;\r\n    }\r\n\r\n    toString() {\r\n        return 'selfdestruct(' + stringify(this.address) + ');';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const address = state.stack.pop();\r\n    state.halted = true;\r\n    state.instructions.push(new SELFDESTRUCT(address));\r\n};\r\n","export default (stateEvents: any, events: string[]) => {\r\n    const stateEventValues = Object.keys(stateEvents).map((key: string) => stateEvents[key]);\r\n    let output = '';\r\n\r\n    events.forEach((event: string) => {\r\n        const eventName = event.split('(')[0];\r\n        const eventArguments = event\r\n            .replace(eventName, '')\r\n            .substring(1)\r\n            .slice(0, -1);\r\n        output += 'event ';\r\n        if (eventArguments) {\r\n            output += eventName + '(';\r\n            output += eventArguments\r\n                .split(',')\r\n                .map((a: string, i: number) => {\r\n                    const stateEvent = stateEventValues.find((e: any) => e.label === event);\r\n                    if (stateEvent && i < stateEvent.indexedCount) {\r\n                        return a + ' indexed _arg' + i;\r\n                    } else {\r\n                        return a + ' _arg' + i;\r\n                    }\r\n                })\r\n                .join(', ');\r\n            output += ')';\r\n        } else {\r\n            output += event;\r\n        }\r\n        output += '\\n';\r\n    });\r\n\r\n    if (events.length > 0) {\r\n        output += '\\n';\r\n    }\r\n\r\n    return output;\r\n};\r\n","export default (mappings: any) => {\r\n    let output = '';\r\n\r\n    Object.keys(mappings)\r\n        .filter((key: any) => mappings[key].structs.length > 0)\r\n        .forEach((key: string, index: number) => {\r\n            const mapping = mappings[key];\r\n            output += 'struct ' + mapping.name + 'Struct {\\n';\r\n            mapping.structs.forEach((struct: any) => {\r\n                output += '    ' + struct.toString() + ';\\n';\r\n            });\r\n            output += '}\\n\\n';\r\n        });\r\n\r\n    return output;\r\n};\r\n","const stringifyMapping = (mapping: any) => {\r\n    const mappingKey: string[] = [];\r\n    const mappingValue: string[] = [];\r\n    let deepMapping = false;\r\n    mapping.keys\r\n        .filter((mappingChild: any) => mappingChild.length > 0)\r\n        .forEach((mappingChild: any) => {\r\n            if (\r\n                mappingChild.length > 0 &&\r\n                mappingChild[0].type &&\r\n                !mappingKey.includes(mappingChild[0].type)\r\n            ) {\r\n                mappingKey.push(mappingChild[0].type);\r\n            }\r\n            if (mappingChild.length > 1 && !deepMapping) {\r\n                deepMapping = true;\r\n                mappingValue.push(\r\n                    stringifyMapping({\r\n                        name: mapping.name,\r\n                        structs: mapping.structs,\r\n                        keys: mapping.keys.map((items: any) => {\r\n                            items.shift();\r\n                            return items;\r\n                        }),\r\n                        values: mapping.values\r\n                    })\r\n                );\r\n            } else if (mappingChild.length === 1 && !deepMapping) {\r\n                mapping.values.forEach((mappingChild2: any) => {\r\n                    if (mappingChild2.type && !mappingValue.includes(mappingChild2.type)) {\r\n                        mappingValue.push(mappingChild2.type);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    if (mappingKey.length === 0) {\r\n        mappingKey.push('unknown');\r\n    }\r\n    if (mapping.structs.length > 0 && mappingValue.length === 0) {\r\n        mappingValue.push(mapping.name + 'Struct');\r\n    } else if (mappingValue.length === 0) {\r\n        mappingValue.push('unknown');\r\n    }\r\n    return 'mapping (' + mappingKey.join('|') + ' => ' + mappingValue.join('|') + ')';\r\n};\r\n\r\nexport default (mappings: any) => {\r\n    let output = '';\r\n\r\n    Object.keys(mappings).forEach((key: string, index: number) => {\r\n        const mapping = mappings[key];\r\n        if (mapping.name) {\r\n            output += stringifyMapping(mapping) + ' public ' + mapping.name + ';';\r\n        } else {\r\n            output += stringifyMapping(mapping) + ' mapping' + (index + 1) + ';';\r\n        }\r\n        output += '\\n';\r\n    });\r\n\r\n    if (Object.keys(mappings).length > 0) {\r\n        output += '\\n';\r\n    }\r\n\r\n    return output;\r\n};\r\n","export default (variables: any) => {\r\n    let output = '';\r\n\r\n    Object.keys(variables).forEach((key: string, index: number) => {\r\n        const variable = variables[key];\r\n        const types = variable.types\r\n            .map((type: any) => {\r\n                if (typeof type === 'function') {\r\n                    return type();\r\n                } else {\r\n                    return type;\r\n                }\r\n            })\r\n            .filter((type: any) => type);\r\n        if (types.length === 0) {\r\n            types.push('unknown');\r\n        }\r\n        if (variable.label) {\r\n            output += [...new Set(types)].join('|') + ' public ' + variable.label + ';';\r\n        } else {\r\n            output += [...new Set(types)].join('|') + ' var' + (index + 1).toString() + ';';\r\n            index++;\r\n        }\r\n        output += '\\n';\r\n    });\r\n\r\n    if (Object.keys(variables).length > 0) {\r\n        output += '\\n';\r\n    }\r\n\r\n    return output;\r\n};\r\n","import stringifyInstructions from './stringifyInstructions';\r\nimport * as functionHashes from '../../data/functionHashes.json';\r\n\r\nexport default (functionName: string, functionInstance: any): string => {\r\n    let output = '';\r\n    output += 'function ';\r\n    if (functionName in functionHashes) {\r\n        const fullFunction = (functionHashes as any)[functionName];\r\n        const fullFunctionName = fullFunction.split('(')[0];\r\n        const fullFunctionArguments = fullFunction\r\n            .replace(fullFunctionName, '')\r\n            .substring(1)\r\n            .slice(0, -1);\r\n        if (fullFunctionArguments) {\r\n            output += fullFunctionName + '(';\r\n            output += fullFunctionArguments\r\n                .split(',')\r\n                .map((a: string, i: number) => a + ' _arg' + i)\r\n                .join(', ');\r\n            output += ')';\r\n        } else {\r\n            output += fullFunction;\r\n        }\r\n    } else {\r\n        output += functionName + '()';\r\n    }\r\n    output += ' ' + functionInstance.visibility;\r\n    if (functionInstance.constant) {\r\n        output += ' view';\r\n    }\r\n    if (functionInstance.payable) {\r\n        output += ' payable';\r\n    }\r\n    if (functionInstance.returns.length > 0) {\r\n        output += ' returns (' + functionInstance.returns.join(', ') + ')';\r\n    }\r\n    output += ' {\\n';\r\n    output += stringifyInstructions(functionInstance.items, 4);\r\n    output += '}\\n\\n';\r\n    return output;\r\n};\r\n","export default class Stack {\r\n    elements: any[];\r\n\r\n    constructor() {\r\n        this.elements = [];\r\n    }\r\n\r\n    push(item: any): void {\r\n        if (this.elements.length >= 1024) {\r\n            throw new Error('Stack too deep');\r\n        } else {\r\n            this.elements.unshift(item);\r\n        }\r\n    }\r\n\r\n    pop(): any {\r\n        if (this.elements.length === 0) {\r\n            throw new Error('POP with empty stack');\r\n        } else {\r\n            return this.elements.shift();\r\n        }\r\n    }\r\n\r\n    duplicate(position: number): void {\r\n        if (position < 0 || position > 15) {\r\n            throw new Error('Unsupported position for duplication operation');\r\n        } else if (!(position in this.elements)) {\r\n            throw new Error(\r\n                \"Invalid duplication operation, provided position wasn't found in stack\"\r\n            );\r\n        } else {\r\n            this.push(this.elements[position]);\r\n        }\r\n    }\r\n\r\n    swap(secondPosition: number): void {\r\n        if (secondPosition < 1 || secondPosition > 16) {\r\n            throw new Error('Unsupported position for swap operation');\r\n        } else if (!(secondPosition in this.elements)) {\r\n            throw new Error(\"Invalid swap operation, provided position wasn't found in stack\");\r\n        } else {\r\n            const firstValue = this.elements[0];\r\n            const secondValue = this.elements[secondPosition];\r\n            this.elements[0] = secondValue;\r\n            this.elements[secondPosition] = firstValue;\r\n        }\r\n    }\r\n\r\n    clone(): Stack {\r\n        const stack = new Stack();\r\n        stack.elements = [...this.elements];\r\n        return stack;\r\n    }\r\n\r\n    reset(): void {\r\n        this.elements = [];\r\n    }\r\n}\r\n"],"sourceRoot":""}