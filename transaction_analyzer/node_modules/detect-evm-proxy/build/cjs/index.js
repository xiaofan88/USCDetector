"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
const helpers_1 = require("./helpers");
const types_1 = require("./types");
async function detectProxyTarget(proxyAddress, jsonRpcRequest, blockTag = "latest") {
    try {
        return await Promise.any([
            // EIP-1167 Minimal Proxy Contract
            jsonRpcRequest({
                method: "eth_getCode",
                params: [proxyAddress, blockTag],
            })
                .then(helpers_1.parse1167Bytecode)
                .then((val) => {
                const contractAddress = (0, helpers_1.readAddress)(val);
                return {
                    contractAddress,
                    kind: types_1.PROXY_KIND.EIP_1167_MINIMAL_PROXY_CONTRACT,
                };
            }),
            // EIP-1967 direct proxy
            jsonRpcRequest({
                method: "eth_getStorageAt",
                params: [proxyAddress, constants_1.EIP_1967_LOGIC_SLOT, blockTag],
            }).then((val) => {
                const contractAddress = (0, helpers_1.readAddress)(val);
                return {
                    contractAddress,
                    kind: types_1.PROXY_KIND.EIP_1967_TRANSPARENT_PROXY_PATTERN,
                };
            }),
            // EIP-1967 beacon proxy
            jsonRpcRequest({
                method: "eth_getStorageAt",
                params: [proxyAddress, constants_1.EIP_1967_BEACON_SLOT, blockTag],
            })
                .then(helpers_1.readAddress)
                .then((beaconAddress) => jsonRpcRequest({
                method: "eth_call",
                params: [
                    {
                        to: beaconAddress,
                        data: constants_1.EIP_1167_BEACON_METHODS[0],
                    },
                    blockTag,
                ],
            }).catch(() => jsonRpcRequest({
                method: "eth_call",
                params: [
                    {
                        to: beaconAddress,
                        data: constants_1.EIP_1167_BEACON_METHODS[1],
                    },
                    blockTag,
                ],
            })))
                .then((val) => {
                const contractAddress = (0, helpers_1.readAddress)(val);
                return {
                    contractAddress,
                    kind: types_1.PROXY_KIND.EIP_1967_TRANSPARENT_PROXY_PATTERN,
                };
            }),
            // EIP-897 DelegateProxy pattern
            jsonRpcRequest({
                method: "eth_call",
                params: [
                    {
                        to: proxyAddress,
                        data: constants_1.EIP_897_INTERFACE[0],
                    },
                    blockTag,
                ],
            }).then((val) => {
                const contractAddress = (0, helpers_1.readAddress)(val);
                return {
                    contractAddress,
                    kind: types_1.PROXY_KIND.EIP_897_DELEGATE_PROXY_PATTERN,
                };
            }),
            // EIP-1822 Universal Upgradeable Proxy Standard
            jsonRpcRequest({
                method: "eth_getStorageAt",
                params: [proxyAddress, constants_1.EIP_1822_LOGIC_SLOT, blockTag],
            }).then((val) => {
                const contractAddress = (0, helpers_1.readAddress)(val);
                return {
                    contractAddress,
                    kind: types_1.PROXY_KIND.EIP_1822_UNIVERSAL_UPGRADEABLE_PROXY_STANDARD,
                };
            }),
            // OpenZeppelin proxy pattern
            jsonRpcRequest({
                method: "eth_getStorageAt",
                params: [proxyAddress, constants_1.OPEN_ZEPPELIN_IMPLEMENTATION_SLOT, blockTag],
            }).then((val) => {
                const contractAddress = (0, helpers_1.readAddress)(val);
                return {
                    contractAddress,
                    kind: types_1.PROXY_KIND.OPEN_ZEPPELIN_PROXY_PATTERN,
                };
            }),
            // GnosisSafeProxy contract
            jsonRpcRequest({
                method: "eth_call",
                params: [
                    {
                        to: proxyAddress,
                        data: constants_1.GNOSIS_SAFE_PROXY_INTERFACE[0],
                    },
                    blockTag,
                ],
            }).then((val) => {
                const contractAddress = (0, helpers_1.readAddress)(val);
                return {
                    contractAddress,
                    kind: types_1.PROXY_KIND.GNOSIS_SAFE_PROXY_CONTRACT,
                };
            }),
        ]);
    }
    catch (_a) {
        return null;
    }
}
exports.default = detectProxyTarget;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FRcUI7QUFDckIsdUNBQTJEO0FBQzNELG1DQUtpQjtBQUVqQixLQUFLLFVBQVUsaUJBQWlCLENBQzlCLFlBQW9CLEVBQ3BCLGNBQTBDLEVBQzFDLFdBQXFCLFFBQVE7SUFFN0IsSUFBSTtRQUNGLE9BQU8sTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ3ZCLGtDQUFrQztZQUNsQyxjQUFjLENBQUM7Z0JBQ2IsTUFBTSxFQUFFLGFBQWE7Z0JBQ3JCLE1BQU0sRUFBRSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUM7YUFDakMsQ0FBQztpQkFDQyxJQUFJLENBQUMsMkJBQWlCLENBQUM7aUJBQ3ZCLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNaLE1BQU0sZUFBZSxHQUFHLElBQUEscUJBQVcsRUFBQyxHQUFHLENBQUMsQ0FBQztnQkFDekMsT0FBTztvQkFDTCxlQUFlO29CQUNmLElBQUksRUFBRSxrQkFBVSxDQUFDLCtCQUErQjtpQkFDakQsQ0FBQztZQUNKLENBQUMsQ0FBQztZQUVKLHdCQUF3QjtZQUN4QixjQUFjLENBQUM7Z0JBQ2IsTUFBTSxFQUFFLGtCQUFrQjtnQkFDMUIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLCtCQUFtQixFQUFFLFFBQVEsQ0FBQzthQUN0RCxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ2QsTUFBTSxlQUFlLEdBQUcsSUFBQSxxQkFBVyxFQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN6QyxPQUFPO29CQUNMLGVBQWU7b0JBQ2YsSUFBSSxFQUFFLGtCQUFVLENBQUMsa0NBQWtDO2lCQUNwRCxDQUFDO1lBQ0osQ0FBQyxDQUFDO1lBRUYsd0JBQXdCO1lBQ3hCLGNBQWMsQ0FBQztnQkFDYixNQUFNLEVBQUUsa0JBQWtCO2dCQUMx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