import { getAddress } from "@ethersproject/address";
import { EIP_1167_BYTECODE_PREFIX, EIP_1167_BYTECODE_SUFFIX, } from "./constants";
export const readAddress = (value) => {
    if (typeof value !== "string" || value === "0x") {
        throw new Error(`Invalid address value: ${value}`);
    }
    let address = value;
    if (address.length === 66) {
        address = "0x" + address.slice(-40);
    }
    const zeroAddress = "0x" + "0".repeat(40);
    if (address === zeroAddress) {
        throw new Error("Empty address");
    }
    return getAddress(address);
};
export const parse1167Bytecode = (bytecode) => {
    if (typeof bytecode !== "string" ||
        !bytecode.startsWith(EIP_1167_BYTECODE_PREFIX) ||
        !bytecode.endsWith(EIP_1167_BYTECODE_SUFFIX)) {
        throw new Error("Not an EIP-1167 bytecode");
    }
    // detect length of address (20 bytes non-optimized, 0 < N < 20 bytes for vanity addresses)
    const pushNHex = bytecode.substring(EIP_1167_BYTECODE_PREFIX.length, EIP_1167_BYTECODE_PREFIX.length + 2);
    // push1 ... push20 use opcodes 0x60 ... 0x73
    const addressLength = parseInt(pushNHex, 16) - 0x5f;
    if (addressLength < 1 || addressLength > 20) {
        throw new Error("Not an EIP-1167 bytecode");
    }
    const addressFromBytecode = bytecode.substring(EIP_1167_BYTECODE_PREFIX.length + 2, EIP_1167_BYTECODE_PREFIX.length + 2 + addressLength * 2 // address length is in bytes, 2 hex chars make up 1 byte
    );
    // padStart is needed for vanity addresses
    return `0x${addressFromBytecode.padStart(40, "0")}`;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUVwRCxPQUFPLEVBQ0wsd0JBQXdCLEVBQ3hCLHdCQUF3QixHQUN6QixNQUFNLGFBQWEsQ0FBQztBQUVyQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFjLEVBQVUsRUFBRTtJQUNwRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO1FBQy9DLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLEtBQUssRUFBRSxDQUFDLENBQUM7S0FDcEQ7SUFFRCxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDcEIsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLEVBQUUsRUFBRTtRQUN6QixPQUFPLEdBQUcsSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNyQztJQUVELE1BQU0sV0FBVyxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLElBQUksT0FBTyxLQUFLLFdBQVcsRUFBRTtRQUMzQixNQUFNLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQ2xDO0lBRUQsT0FBTyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxRQUFpQixFQUFVLEVBQUU7SUFDN0QsSUFDRSxPQUFPLFFBQVEsS0FBSyxRQUFRO1FBQzVCLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQztRQUM5QyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUMsRUFDNUM7UUFDQSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7S0FDN0M7SUFFRCwyRkFBMkY7SUFDM0YsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FDakMsd0JBQXdCLENBQUMsTUFBTSxFQUMvQix3QkFBd0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUNwQyxDQUFDO0lBQ0YsNkNBQTZDO0lBQzdDLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBRXBELElBQUksYUFBYSxHQUFHLENBQUMsSUFBSSxhQUFhLEdBQUcsRUFBRSxFQUFFO1FBQzNDLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztLQUM3QztJQUVELE1BQU0sbUJBQW1CLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FDNUMsd0JBQXdCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDbkMsd0JBQXdCLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxhQUFhLEdBQUcsQ0FBQyxDQUFDLHlEQUF5RDtLQUNsSCxDQUFDO0lBRUYsMENBQTBDO0lBQzFDLE9BQU8sS0FBSyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUM7QUFDdEQsQ0FBQyxDQUFDIn0=